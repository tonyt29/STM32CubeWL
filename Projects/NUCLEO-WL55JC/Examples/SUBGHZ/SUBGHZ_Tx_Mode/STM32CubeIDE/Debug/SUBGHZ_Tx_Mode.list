
SUBGHZ_Tx_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003228  08003228  00004228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003300  08003300  000050a4  2**0
                  CONTENTS
  4 .ARM          00000008  08003300  08003300  00004300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003308  08003308  000050a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003308  08003308  00004308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800330c  0800330c  0000430c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08003310  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200000a4  080033b4  000050a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080033b4  00005230  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00009760  00000000  00000000  000050ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000a8  00000000  00000000  0000e82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00007aca  00000000  00000000  0000e8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001933  00000000  00000000  000163a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd0  00000000  00000000  00017cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ae528  00000000  00000000  000188a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000008b5  00000000  00000000  000c6dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001c56d  00000000  00000000  000c7685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e3bf2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036c8  00000000  00000000  000e3c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a4 	.word	0x200000a4
 800015c:	00000000 	.word	0x00000000
 8000160:	08003210 	.word	0x08003210

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a8 	.word	0x200000a8
 800017c:	08003210 	.word	0x08003210

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	@ (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000224:	f000 fb90 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	@ (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	@ (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	@ (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	@ (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f002 fa21 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f000 f80f 	bl	8000274 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000264:	08003310 	.word	0x08003310
  ldr r2, =_sbss
 8000268:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800026c:	20000230 	.word	0x20000230

08000270 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC_IRQHandler>
	...

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fb6c 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f9c4 	bl	8000608 <SystemClock_Config>
  /* Configure LED2 & LED3 */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SUBGHZ_Init();
 8000280:	f000 fa14 	bl	80006ac <MX_SUBGHZ_Init>
  /* USER CODE BEGIN 2 */

  /*## 1 - Wakeup the SUBGHZ Radio ###########################################*/

  /* Retrieve Status from SUBGHZ Radio */
  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1) != HAL_OK)
 8000284:	2301      	movs	r3, #1
 8000286:	4a73      	ldr	r2, [pc, #460]	@ (8000454 <main+0x1e0>)
 8000288:	21c0      	movs	r1, #192	@ 0xc0
 800028a:	4873      	ldr	r0, [pc, #460]	@ (8000458 <main+0x1e4>)
 800028c:	f001 ff21 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <main+0x28>
  {
    Error_Handler();
 8000296:	f000 fa1b 	bl	80006d0 <Error_Handler>
 800029a:	e00e      	b.n	80002ba <main+0x46>
  }
  else
  {
    /* Format Mode and Status receive from SUBGHZ Radio */
    RadioMode   = ((RadioResult & RADIO_MODE_BITFIELD) >> 4); 
 800029c:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <main+0x1e0>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	111b      	asrs	r3, r3, #4
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	f003 0307 	and.w	r3, r3, #7
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4b6c      	ldr	r3, [pc, #432]	@ (800045c <main+0x1e8>)
 80002ac:	701a      	strb	r2, [r3, #0]
    
    /* Check if SUBGHZ Radio is in RADIO_MODE_STANDBY_RC mode */
    if(RadioMode != RADIO_MODE_STANDBY_RC)
 80002ae:	4b6b      	ldr	r3, [pc, #428]	@ (800045c <main+0x1e8>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	d001      	beq.n	80002ba <main+0x46>
    {
      Error_Handler();
 80002b6:	f000 fa0b 	bl	80006d0 <Error_Handler>
    }
  }

  //Step 1
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_BUFFERBASEADDRESS, RadioBufferAddr, 2) != HAL_OK)
 80002ba:	2302      	movs	r3, #2
 80002bc:	4a68      	ldr	r2, [pc, #416]	@ (8000460 <main+0x1ec>)
 80002be:	218f      	movs	r1, #143	@ 0x8f
 80002c0:	4865      	ldr	r0, [pc, #404]	@ (8000458 <main+0x1e4>)
 80002c2:	f001 fea7 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <main+0x5c>
  {
	  Error_Handler();
 80002cc:	f000 fa00 	bl	80006d0 <Error_Handler>
  }

  //Step 2
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, SUBGHZ_RADIO_WRITE_BUFFER, RadioTxData, 6) != HAL_OK)
 80002d0:	2306      	movs	r3, #6
 80002d2:	4a64      	ldr	r2, [pc, #400]	@ (8000464 <main+0x1f0>)
 80002d4:	210e      	movs	r1, #14
 80002d6:	4860      	ldr	r0, [pc, #384]	@ (8000458 <main+0x1e4>)
 80002d8:	f001 fe9c 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <main+0x72>
  {
	  Error_Handler();
 80002e2:	f000 f9f5 	bl	80006d0 <Error_Handler>
  }

  //Step 3
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETTYPE, RadioPacketType, 1) != HAL_OK)
 80002e6:	2301      	movs	r3, #1
 80002e8:	4a5f      	ldr	r2, [pc, #380]	@ (8000468 <main+0x1f4>)
 80002ea:	218a      	movs	r1, #138	@ 0x8a
 80002ec:	485a      	ldr	r0, [pc, #360]	@ (8000458 <main+0x1e4>)
 80002ee:	f001 fe91 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <main+0x88>
  {
	  Error_Handler();
 80002f8:	f000 f9ea 	bl	80006d0 <Error_Handler>
  }
  //Step 3.5 - Verify packet type
  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_PACKETTYPE, RadioGetData, 2) != HAL_OK)
 80002fc:	2302      	movs	r3, #2
 80002fe:	4a5b      	ldr	r2, [pc, #364]	@ (800046c <main+0x1f8>)
 8000300:	2111      	movs	r1, #17
 8000302:	4855      	ldr	r0, [pc, #340]	@ (8000458 <main+0x1e4>)
 8000304:	f001 fee5 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <main+0x9e>
  {
	  Error_Handler();
 800030e:	f000 f9df 	bl	80006d0 <Error_Handler>
  }

  //Step 4
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETPARAMS, RadioPacketParams, 9) != HAL_OK)
 8000312:	2309      	movs	r3, #9
 8000314:	4a56      	ldr	r2, [pc, #344]	@ (8000470 <main+0x1fc>)
 8000316:	218c      	movs	r1, #140	@ 0x8c
 8000318:	484f      	ldr	r0, [pc, #316]	@ (8000458 <main+0x1e4>)
 800031a:	f001 fe7b 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <main+0xb4>
  {
	  Error_Handler();
 8000324:	f000 f9d4 	bl	80006d0 <Error_Handler>
  }

  //Step 5
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, SUBGHZ_RADIO_WRITE_REGISTER, RadioSyncr, 3) != HAL_OK)
 8000328:	2303      	movs	r3, #3
 800032a:	4a52      	ldr	r2, [pc, #328]	@ (8000474 <main+0x200>)
 800032c:	210d      	movs	r1, #13
 800032e:	484a      	ldr	r0, [pc, #296]	@ (8000458 <main+0x1e4>)
 8000330:	f001 fe70 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <main+0xca>
  {
	  Error_Handler();
 800033a:	f000 f9c9 	bl	80006d0 <Error_Handler>
  }
  //Step 6
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_RFFREQUENCY, RadioFrequency, 4) != HAL_OK)
 800033e:	2304      	movs	r3, #4
 8000340:	4a4d      	ldr	r2, [pc, #308]	@ (8000478 <main+0x204>)
 8000342:	2186      	movs	r1, #134	@ 0x86
 8000344:	4844      	ldr	r0, [pc, #272]	@ (8000458 <main+0x1e4>)
 8000346:	f001 fe65 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <main+0xe0>
  {
	  Error_Handler();
 8000350:	f000 f9be 	bl	80006d0 <Error_Handler>
  }
  //Step 7
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACONFIG, RadioPA, 4) != HAL_OK)
 8000354:	2304      	movs	r3, #4
 8000356:	4a49      	ldr	r2, [pc, #292]	@ (800047c <main+0x208>)
 8000358:	2195      	movs	r1, #149	@ 0x95
 800035a:	483f      	ldr	r0, [pc, #252]	@ (8000458 <main+0x1e4>)
 800035c:	f001 fe5a 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <main+0xf6>
  {
	  Error_Handler();
 8000366:	f000 f9b3 	bl	80006d0 <Error_Handler>
  }
  //Step 8
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TXPARAMS, RadioTxPA, 2) != HAL_OK)
 800036a:	2302      	movs	r3, #2
 800036c:	4a44      	ldr	r2, [pc, #272]	@ (8000480 <main+0x20c>)
 800036e:	218e      	movs	r1, #142	@ 0x8e
 8000370:	4839      	ldr	r0, [pc, #228]	@ (8000458 <main+0x1e4>)
 8000372:	f001 fe4f 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <main+0x10c>
  {
	  Error_Handler();
 800037c:	f000 f9a8 	bl	80006d0 <Error_Handler>
  }
  //Step 9
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_MODULATIONPARAMS, LoRaMod, 4) != HAL_OK)
 8000380:	2304      	movs	r3, #4
 8000382:	4a40      	ldr	r2, [pc, #256]	@ (8000484 <main+0x210>)
 8000384:	218b      	movs	r1, #139	@ 0x8b
 8000386:	4834      	ldr	r0, [pc, #208]	@ (8000458 <main+0x1e4>)
 8000388:	f001 fe44 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <main+0x122>
  {
	  Error_Handler();
 8000392:	f000 f99d 	bl	80006d0 <Error_Handler>
  }
  //Step 10
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CFG_DIOIRQ, RadioConfigIRQ, 8) != HAL_OK)
 8000396:	2308      	movs	r3, #8
 8000398:	4a3b      	ldr	r2, [pc, #236]	@ (8000488 <main+0x214>)
 800039a:	2108      	movs	r1, #8
 800039c:	482e      	ldr	r0, [pc, #184]	@ (8000458 <main+0x1e4>)
 800039e:	f001 fe39 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <main+0x138>
  {
	  Error_Handler();
 80003a8:	f000 f992 	bl	80006d0 <Error_Handler>
  }
  //Step 11
  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TX, RadioCmd, 3) != HAL_OK)
 80003ac:	2303      	movs	r3, #3
 80003ae:	4a37      	ldr	r2, [pc, #220]	@ (800048c <main+0x218>)
 80003b0:	2183      	movs	r1, #131	@ 0x83
 80003b2:	4829      	ldr	r0, [pc, #164]	@ (8000458 <main+0x1e4>)
 80003b4:	f001 fe2e 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <main+0x14e>
  {
	  // After the transmission is finished, the sub-GHZ radio enters automatically the Standby mode
	  Error_Handler();
 80003be:	f000 f987 	bl	80006d0 <Error_Handler>
  }

  //Step 11.5 - Check Status
  RadioResult = 0x00;
 80003c2:	4b24      	ldr	r3, [pc, #144]	@ (8000454 <main+0x1e0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1) != HAL_OK)
 80003c8:	2301      	movs	r3, #1
 80003ca:	4a22      	ldr	r2, [pc, #136]	@ (8000454 <main+0x1e0>)
 80003cc:	21c0      	movs	r1, #192	@ 0xc0
 80003ce:	4822      	ldr	r0, [pc, #136]	@ (8000458 <main+0x1e4>)
 80003d0:	f001 fe7f 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <main+0x16a>
  {
    Error_Handler();
 80003da:	f000 f979 	bl	80006d0 <Error_Handler>
  }
  RadioMode   = ((RadioResult & RADIO_MODE_BITFIELD) >> 4);
 80003de:	4b1d      	ldr	r3, [pc, #116]	@ (8000454 <main+0x1e0>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	111b      	asrs	r3, r3, #4
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	f003 0307 	and.w	r3, r3, #7
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <main+0x1e8>)
 80003ee:	701a      	strb	r2, [r3, #0]
  RadioStatus = ((RadioResult & RADIO_STATUS_BITFIELD) >> 1);
 80003f0:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <main+0x1e0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	f003 0307 	and.w	r3, r3, #7
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b24      	ldr	r3, [pc, #144]	@ (8000490 <main+0x21c>)
 8000400:	701a      	strb	r2, [r3, #0]

  if (RadioMode == RADIO_MODE_TX)
 8000402:	4b16      	ldr	r3, [pc, #88]	@ (800045c <main+0x1e8>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b06      	cmp	r3, #6
 8000408:	d144      	bne.n	8000494 <main+0x220>
    {
      /* Wait end of transfer. SUBGHZ Radio go in Standby Mode */
      do
      {
        RadioResult = 0x00;
 800040a:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <main+0x1e0>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
        if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1) != HAL_OK)
 8000410:	2301      	movs	r3, #1
 8000412:	4a10      	ldr	r2, [pc, #64]	@ (8000454 <main+0x1e0>)
 8000414:	21c0      	movs	r1, #192	@ 0xc0
 8000416:	4810      	ldr	r0, [pc, #64]	@ (8000458 <main+0x1e4>)
 8000418:	f001 fe5b 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <main+0x1b2>
        {
          Error_Handler();
 8000422:	f000 f955 	bl	80006d0 <Error_Handler>
        }

        RadioMode   = ((RadioResult & RADIO_MODE_BITFIELD) >> 4);
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <main+0x1e0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	111b      	asrs	r3, r3, #4
 800042c:	b2db      	uxtb	r3, r3
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b09      	ldr	r3, [pc, #36]	@ (800045c <main+0x1e8>)
 8000436:	701a      	strb	r2, [r3, #0]
        RadioStatus = ((RadioResult & RADIO_STATUS_BITFIELD) >> 1);
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <main+0x1e0>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	105b      	asrs	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <main+0x21c>)
 8000448:	701a      	strb	r2, [r3, #0]
      }
      while (RadioMode != RADIO_MODE_STANDBY_RC);
 800044a:	4b04      	ldr	r3, [pc, #16]	@ (800045c <main+0x1e8>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d1db      	bne.n	800040a <main+0x196>
 8000452:	e021      	b.n	8000498 <main+0x224>
 8000454:	200000d7 	.word	0x200000d7
 8000458:	200000c0 	.word	0x200000c0
 800045c:	200000d8 	.word	0x200000d8
 8000460:	20000000 	.word	0x20000000
 8000464:	20000004 	.word	0x20000004
 8000468:	2000000c 	.word	0x2000000c
 800046c:	200000d0 	.word	0x200000d0
 8000470:	20000010 	.word	0x20000010
 8000474:	2000001c 	.word	0x2000001c
 8000478:	20000020 	.word	0x20000020
 800047c:	20000024 	.word	0x20000024
 8000480:	20000028 	.word	0x20000028
 8000484:	2000002c 	.word	0x2000002c
 8000488:	20000030 	.word	0x20000030
 800048c:	200000d4 	.word	0x200000d4
 8000490:	200000d9 	.word	0x200000d9
    }
    else
    {
      Error_Handler();
 8000494:	f000 f91c 	bl	80006d0 <Error_Handler>
    }

  //Step 12
  IRQStatus = 0x00;
 8000498:	4b52      	ldr	r3, [pc, #328]	@ (80005e4 <main+0x370>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, RadioGetIRQ, 3) != HAL_OK)
 800049e:	2303      	movs	r3, #3
 80004a0:	4a51      	ldr	r2, [pc, #324]	@ (80005e8 <main+0x374>)
 80004a2:	2112      	movs	r1, #18
 80004a4:	4851      	ldr	r0, [pc, #324]	@ (80005ec <main+0x378>)
 80004a6:	f001 fe14 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <main+0x240>
  {
	  Error_Handler();
 80004b0:	f000 f90e 	bl	80006d0 <Error_Handler>
  }
  IRQStatus = RadioGetIRQ[1];
 80004b4:	4b4c      	ldr	r3, [pc, #304]	@ (80005e8 <main+0x374>)
 80004b6:	785a      	ldrb	r2, [r3, #1]
 80004b8:	4b4a      	ldr	r3, [pc, #296]	@ (80005e4 <main+0x370>)
 80004ba:	701a      	strb	r2, [r3, #0]

  if (IRQStatus)
 80004bc:	4b49      	ldr	r3, [pc, #292]	@ (80005e4 <main+0x370>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d00a      	beq.n	80004da <main+0x266>
  {
	  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CLR_IRQSTATUS, RadioClrIRQ, 2) != HAL_OK)
 80004c4:	2302      	movs	r3, #2
 80004c6:	4a4a      	ldr	r2, [pc, #296]	@ (80005f0 <main+0x37c>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	4848      	ldr	r0, [pc, #288]	@ (80005ec <main+0x378>)
 80004cc:	f001 fda2 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <main+0x266>
	  {
		  Error_Handler();
 80004d6:	f000 f8fb 	bl	80006d0 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Infinite sending
	  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, SUBGHZ_RADIO_WRITE_BUFFER, RadioTxData, 6) != HAL_OK)
 80004da:	2306      	movs	r3, #6
 80004dc:	4a45      	ldr	r2, [pc, #276]	@ (80005f4 <main+0x380>)
 80004de:	210e      	movs	r1, #14
 80004e0:	4842      	ldr	r0, [pc, #264]	@ (80005ec <main+0x378>)
 80004e2:	f001 fd97 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <main+0x27c>
		{
		  Error_Handler();
 80004ec:	f000 f8f0 	bl	80006d0 <Error_Handler>
		}
	  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TX, RadioCmd, 3) != HAL_OK)
 80004f0:	2303      	movs	r3, #3
 80004f2:	4a41      	ldr	r2, [pc, #260]	@ (80005f8 <main+0x384>)
 80004f4:	2183      	movs	r1, #131	@ 0x83
 80004f6:	483d      	ldr	r0, [pc, #244]	@ (80005ec <main+0x378>)
 80004f8:	f001 fd8c 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <main+0x292>
	    {
	  	  // After the transmission is finished, the sub-GHZ radio enters automatically the Standby mode
	  	  Error_Handler();
 8000502:	f000 f8e5 	bl	80006d0 <Error_Handler>
	    }
	  RadioResult = 0x00;
 8000506:	4b3d      	ldr	r3, [pc, #244]	@ (80005fc <main+0x388>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	    if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1) != HAL_OK)
 800050c:	2301      	movs	r3, #1
 800050e:	4a3b      	ldr	r2, [pc, #236]	@ (80005fc <main+0x388>)
 8000510:	21c0      	movs	r1, #192	@ 0xc0
 8000512:	4836      	ldr	r0, [pc, #216]	@ (80005ec <main+0x378>)
 8000514:	f001 fddd 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <main+0x2ae>
	    {
	      Error_Handler();
 800051e:	f000 f8d7 	bl	80006d0 <Error_Handler>
	    }
	    RadioMode   = ((RadioResult & RADIO_MODE_BITFIELD) >> 4);
 8000522:	4b36      	ldr	r3, [pc, #216]	@ (80005fc <main+0x388>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	111b      	asrs	r3, r3, #4
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b33      	ldr	r3, [pc, #204]	@ (8000600 <main+0x38c>)
 8000532:	701a      	strb	r2, [r3, #0]
	    RadioStatus = ((RadioResult & RADIO_STATUS_BITFIELD) >> 1);
 8000534:	4b31      	ldr	r3, [pc, #196]	@ (80005fc <main+0x388>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	105b      	asrs	r3, r3, #1
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f003 0307 	and.w	r3, r3, #7
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b30      	ldr	r3, [pc, #192]	@ (8000604 <main+0x390>)
 8000544:	701a      	strb	r2, [r3, #0]

	    if (RadioMode == RADIO_MODE_TX)
 8000546:	4b2e      	ldr	r3, [pc, #184]	@ (8000600 <main+0x38c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b06      	cmp	r3, #6
 800054c:	d124      	bne.n	8000598 <main+0x324>
	      {
	        /* Wait end of transfer. SUBGHZ Radio go in Standby Mode */
	        do
	        {
	          RadioResult = 0x00;
 800054e:	4b2b      	ldr	r3, [pc, #172]	@ (80005fc <main+0x388>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
	          if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_STATUS, &RadioResult, 1) != HAL_OK)
 8000554:	2301      	movs	r3, #1
 8000556:	4a29      	ldr	r2, [pc, #164]	@ (80005fc <main+0x388>)
 8000558:	21c0      	movs	r1, #192	@ 0xc0
 800055a:	4824      	ldr	r0, [pc, #144]	@ (80005ec <main+0x378>)
 800055c:	f001 fdb9 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <main+0x2f6>
	          {
	            Error_Handler();
 8000566:	f000 f8b3 	bl	80006d0 <Error_Handler>
	          }

	          RadioMode   = ((RadioResult & RADIO_MODE_BITFIELD) >> 4);
 800056a:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <main+0x388>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	111b      	asrs	r3, r3, #4
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <main+0x38c>)
 800057a:	701a      	strb	r2, [r3, #0]
	          RadioStatus = ((RadioResult & RADIO_STATUS_BITFIELD) >> 1);
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <main+0x388>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	105b      	asrs	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	f003 0307 	and.w	r3, r3, #7
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <main+0x390>)
 800058c:	701a      	strb	r2, [r3, #0]
	        }
	        while (RadioMode != RADIO_MODE_STANDBY_RC);
 800058e:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <main+0x38c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d1db      	bne.n	800054e <main+0x2da>
 8000596:	e001      	b.n	800059c <main+0x328>
	      }
	      else
	      {
	        Error_Handler();
 8000598:	f000 f89a 	bl	80006d0 <Error_Handler>
	      }
	  IRQStatus = 0x00;
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <main+0x370>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
		if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, RadioGetIRQ, 3) != HAL_OK)
 80005a2:	2303      	movs	r3, #3
 80005a4:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <main+0x374>)
 80005a6:	2112      	movs	r1, #18
 80005a8:	4810      	ldr	r0, [pc, #64]	@ (80005ec <main+0x378>)
 80005aa:	f001 fd92 	bl	80020d2 <HAL_SUBGHZ_ExecGetCmd>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <main+0x344>
		{
		  Error_Handler();
 80005b4:	f000 f88c 	bl	80006d0 <Error_Handler>
		}
		IRQStatus = RadioGetIRQ[1];
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <main+0x374>)
 80005ba:	785a      	ldrb	r2, [r3, #1]
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <main+0x370>)
 80005be:	701a      	strb	r2, [r3, #0]

		if (IRQStatus)
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <main+0x370>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d088      	beq.n	80004da <main+0x266>
		{
		  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CLR_IRQSTATUS, RadioClrIRQ, 2) != HAL_OK)
 80005c8:	2302      	movs	r3, #2
 80005ca:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <main+0x37c>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <main+0x378>)
 80005d0:	f001 fd20 	bl	8002014 <HAL_SUBGHZ_ExecSetCmd>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f43f af7f 	beq.w	80004da <main+0x266>
		  {
			  Error_Handler();
 80005dc:	f000 f878 	bl	80006d0 <Error_Handler>
	  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, SUBGHZ_RADIO_WRITE_BUFFER, RadioTxData, 6) != HAL_OK)
 80005e0:	e77b      	b.n	80004da <main+0x266>
 80005e2:	bf00      	nop
 80005e4:	200000da 	.word	0x200000da
 80005e8:	200000cc 	.word	0x200000cc
 80005ec:	200000c0 	.word	0x200000c0
 80005f0:	20000038 	.word	0x20000038
 80005f4:	20000004 	.word	0x20000004
 80005f8:	200000d4 	.word	0x200000d4
 80005fc:	200000d7 	.word	0x200000d7
 8000600:	200000d8 	.word	0x200000d8
 8000604:	200000d9 	.word	0x200000d9

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09a      	sub	sp, #104	@ 0x68
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2248      	movs	r2, #72	@ 0x48
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 ffe7 	bl	80025ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <SystemClock_Config+0xa0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000636:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <SystemClock_Config+0xa0>)
 8000638:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <SystemClock_Config+0xa0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064a:	2320      	movs	r3, #32
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000652:	2300      	movs	r3, #0
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000656:	2360      	movs	r3, #96	@ 0x60
 8000658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065a:	2300      	movs	r3, #0
 800065c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fdae 	bl	80011c4 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800066e:	f000 f82f 	bl	80006d0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000672:	234f      	movs	r3, #79	@ 0x4f
 8000674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f91a 	bl	80018c8 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 f819 	bl	80006d0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3768      	adds	r7, #104	@ 0x68
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	58000400 	.word	0x58000400

080006ac <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_SUBGHZ_Init+0x20>)
 80006b2:	2210      	movs	r2, #16
 80006b4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_SUBGHZ_Init+0x20>)
 80006b8:	f001 fc48 	bl	8001f4c <HAL_SUBGHZ_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80006c2:	f000 f805 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000c0 	.word	0x200000c0

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    printf("Error");
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <Error_Handler+0x18>)
 80006d6:	f001 ff33 	bl	8002540 <iprintf>
    HAL_Delay(500);
 80006da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006de:	f000 f9af 	bl	8000a40 <HAL_Delay>
    printf("Error");
 80006e2:	bf00      	nop
 80006e4:	e7f6      	b.n	80006d4 <Error_Handler+0x4>
 80006e6:	bf00      	nop
 80006e8:	08003228 	.word	0x08003228

080006ec <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80006f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800070c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800071a:	6013      	str	r3, [r2, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000736:	d101      	bne.n	800073c <LL_RCC_HSE_IsReady+0x18>
 8000738:	2301      	movs	r3, #1
 800073a:	e000      	b.n	800073e <LL_RCC_HSE_IsReady+0x1a>
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800074e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000752:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000754:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4313      	orrs	r3, r2
 800075c:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800075e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000762:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ffdb 	bl	8000746 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */
  LL_RCC_HSE_EnableTcxo();
 8000790:	f7ff ffac 	bl	80006ec <LL_RCC_HSE_EnableTcxo>

  LL_RCC_HSE_Enable();
 8000794:	f7ff ffb8 	bl	8000708 <LL_RCC_HSE_Enable>

  while (LL_RCC_HSE_IsReady() == 0)
 8000798:	bf00      	nop
 800079a:	f7ff ffc3 	bl	8000724 <LL_RCC_HSE_IsReady>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0fa      	beq.n	800079a <HAL_SUBGHZ_MspInit+0x18>
  {}
  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	bf00      	nop
 80007c0:	e7fd      	b.n	80007be <HardFault_Handler+0x4>

080007c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c6:	bf00      	nop
 80007c8:	e7fd      	b.n	80007c6 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	bf00      	nop
 80007d0:	e7fd      	b.n	80007ce <BusFault_Handler+0x4>

080007d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d6:	bf00      	nop
 80007d8:	e7fd      	b.n	80007d6 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000802:	f000 f901 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}

0800080a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	e00a      	b.n	8000832 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081c:	f3af 8000 	nop.w
 8000820:	4601      	mov	r1, r0
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	60ba      	str	r2, [r7, #8]
 8000828:	b2ca      	uxtb	r2, r1
 800082a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	3301      	adds	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	429a      	cmp	r2, r3
 8000838:	dbf0      	blt.n	800081c <_read+0x12>
	}

return len;
 800083a:	687b      	ldr	r3, [r7, #4]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e009      	b.n	800086a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	60ba      	str	r2, [r7, #8]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3301      	adds	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	dbf1      	blt.n	8000856 <_write+0x12>
	}
	return len;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_close>:

int _close(int file)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	return -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008a2:	605a      	str	r2, [r3, #4]
	return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <_isatty>:

int _isatty(int file)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	return 1;
 80008b8:	2301      	movs	r3, #1
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <_sbrk>:
  *
  * @param incr Memory size
  * @return Pointer to allocated memory
  */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f001 febc 	bl	8002688 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20008000 	.word	0x20008000
 800093c:	00000400 	.word	0x00000400
 8000940:	200000dc 	.word	0x200000dc
 8000944:	20000230 	.word	0x20000230

08000948 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f942 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000964:	f001 f992 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8000968:	4603      	mov	r3, r0
 800096a:	4a09      	ldr	r2, [pc, #36]	@ (8000990 <HAL_Init+0x3c>)
 800096c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f810 	bl	8000994 <HAL_InitTick>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	e001      	b.n	8000984 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000980:	f7ff fef9 	bl	8000776 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000984:	79fb      	ldrb	r3, [r7, #7]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000003c 	.word	0x2000003c

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <HAL_InitTick+0x6c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d024      	beq.n	80009f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a8:	f001 f970 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 80009ac:	4602      	mov	r2, r0
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <HAL_InitTick+0x6c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80009bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f936 	bl	8000c32 <HAL_SYSTICK_Config>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10f      	bne.n	80009ec <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d809      	bhi.n	80009e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d2:	2200      	movs	r2, #0
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	f04f 30ff 	mov.w	r0, #4294967295
 80009da:	f000 f910 	bl	8000bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009de:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <HAL_InitTick+0x70>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6013      	str	r3, [r2, #0]
 80009e4:	e007      	b.n	80009f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e004      	b.n	80009f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e001      	b.n	80009f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000044 	.word	0x20000044
 8000a04:	20000040 	.word	0x20000040

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	@ (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000044 	.word	0x20000044
 8000a28:	200000e0 	.word	0x200000e0

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	@ (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200000e0 	.word	0x200000e0

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000044 	.word	0x20000044

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	@ (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	@ (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	@ 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	@ 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff49 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff60 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff92 	bl	8000b40 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff61 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb2 	bl	8000ba4 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	58000400 	.word	0x58000400

08000c68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_PWREx_GetVoltageRange+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	58000400 	.word	0x58000400

08000c80 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c90:	d101      	bne.n	8000c96 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	58000400 	.word	0x58000400

08000ca4 <LL_RCC_HSE_EnableTcxo>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <LL_RCC_HSE_DisableTcxo>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000cee:	d101      	bne.n	8000cf4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <LL_RCC_HSE_Enable>:
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <LL_RCC_HSE_Disable>:
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <LL_RCC_HSE_IsReady>:
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000d48:	d101      	bne.n	8000d4e <LL_RCC_HSE_IsReady+0x18>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <LL_RCC_HSE_IsReady+0x1a>
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000da2:	d101      	bne.n	8000da8 <LL_RCC_HSI_IsReady+0x18>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <LL_RCC_HSI_IsReady+0x1a>
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	061b      	lsls	r3, r3, #24
 8000dc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d101      	bne.n	8000df2 <LL_RCC_LSE_IsReady+0x18>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <LL_RCC_LSE_IsReady+0x1a>
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d101      	bne.n	8000e54 <LL_RCC_LSI_IsReady+0x18>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <LL_RCC_LSI_IsReady+0x1a>
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6013      	str	r3, [r2, #0]
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d101      	bne.n	8000eac <LL_RCC_MSI_IsReady+0x16>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <LL_RCC_MSI_IsReady+0x18>
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d101      	bne.n	8000ecc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ef8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f023 0203 	bic.w	r2, r3, #3
 8000f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 030c 	and.w	r3, r3, #12
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000f9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000fc8:	f023 020f 	bic.w	r2, r3, #15
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000ff6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	608b      	str	r3, [r1, #8]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800101c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4313      	orrs	r3, r2
 8001024:	608b      	str	r3, [r1, #8]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800104e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800106e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800108a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80010aa:	d101      	bne.n	80010b0 <LL_RCC_PLL_IsReady+0x18>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <LL_RCC_PLL_IsReady+0x1a>
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f003 0303 	and.w	r3, r3, #3
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001126:	d101      	bne.n	800112c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800113e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800114a:	d101      	bne.n	8001150 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001162:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800116e:	d101      	bne.n	8001174 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001190:	d101      	bne.n	8001196 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80011b2:	d101      	bne.n	80011b8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e36f      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d6:	f7ff febc 	bl	8000f52 <LL_RCC_GetSysClkSource>
 80011da:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011dc:	f7ff ff8f 	bl	80010fe <LL_RCC_PLL_GetMainSource>
 80011e0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80c4 	beq.w	8001378 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x3e>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	2b0c      	cmp	r3, #12
 80011fa:	d176      	bne.n	80012ea <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d173      	bne.n	80012ea <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e353      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_OscConfig+0x68>
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800122a:	e006      	b.n	800123a <HAL_RCC_OscConfig+0x76>
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800123a:	4293      	cmp	r3, r2
 800123c:	d222      	bcs.n	8001284 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fd36 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e331      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001270:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe41 	bl	8000f04 <LL_RCC_MSI_SetCalibTrimming>
 8001282:	e021      	b.n	80012c8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe28 	bl	8000f04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fcfb 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e2f6      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012c8:	f000 fce0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4aa7      	ldr	r2, [pc, #668]	@ (800156c <HAL_RCC_OscConfig+0x3a8>)
 80012d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80012d2:	4ba7      	ldr	r3, [pc, #668]	@ (8001570 <HAL_RCC_OscConfig+0x3ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb5c 	bl	8000994 <HAL_InitTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80012e0:	7cfb      	ldrb	r3, [r7, #19]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d047      	beq.n	8001376 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	e2e5      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02c      	beq.n	800134c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f2:	f7ff fdb4 	bl	8000e5e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fb99 	bl	8000a2c <HAL_GetTick>
 80012fa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012fe:	f7ff fb95 	bl	8000a2c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e2d2      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001310:	f7ff fdc1 	bl	8000e96 <LL_RCC_MSI_IsReady>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f1      	beq.n	80012fe <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fddd 	bl	8000f04 <LL_RCC_MSI_SetCalibTrimming>
 800134a:	e015      	b.n	8001378 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800134c:	f7ff fd95 	bl	8000e7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb6c 	bl	8000a2c <HAL_GetTick>
 8001354:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001358:	f7ff fb68 	bl	8000a2c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e2a5      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800136a:	f7ff fd94 	bl	8000e96 <LL_RCC_MSI_IsReady>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f1      	bne.n	8001358 <HAL_RCC_OscConfig+0x194>
 8001374:	e000      	b.n	8001378 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001376:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d058      	beq.n	8001436 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x1d2>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d108      	bne.n	80013a2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d105      	bne.n	80013a2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e289      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c0:	d102      	bne.n	80013c8 <HAL_RCC_OscConfig+0x204>
 80013c2:	f7ff fc9c 	bl	8000cfe <LL_RCC_HSE_Enable>
 80013c6:	e00d      	b.n	80013e4 <HAL_RCC_OscConfig+0x220>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80013d0:	d104      	bne.n	80013dc <HAL_RCC_OscConfig+0x218>
 80013d2:	f7ff fc67 	bl	8000ca4 <LL_RCC_HSE_EnableTcxo>
 80013d6:	f7ff fc92 	bl	8000cfe <LL_RCC_HSE_Enable>
 80013da:	e003      	b.n	80013e4 <HAL_RCC_OscConfig+0x220>
 80013dc:	f7ff fc9d 	bl	8000d1a <LL_RCC_HSE_Disable>
 80013e0:	f7ff fc6e 	bl	8000cc0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d012      	beq.n	8001412 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb1e 	bl	8000a2c <HAL_GetTick>
 80013f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fb1a 	bl	8000a2c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e257      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001406:	f7ff fc96 	bl	8000d36 <LL_RCC_HSE_IsReady>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f1      	beq.n	80013f4 <HAL_RCC_OscConfig+0x230>
 8001410:	e011      	b.n	8001436 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb0b 	bl	8000a2c <HAL_GetTick>
 8001416:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141a:	f7ff fb07 	bl	8000a2c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b64      	cmp	r3, #100	@ 0x64
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e244      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800142c:	f7ff fc83 	bl	8000d36 <LL_RCC_HSE_IsReady>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f1      	bne.n	800141a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d046      	beq.n	80014d0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	2b04      	cmp	r3, #4
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x290>
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0c      	cmp	r3, #12
 800144c:	d10e      	bne.n	800146c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d10b      	bne.n	800146c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e22a      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fca4 	bl	8000db2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800146a:	e031      	b.n	80014d0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d019      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	f7ff fc70 	bl	8000d58 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fad8 	bl	8000a2c <HAL_GetTick>
 800147c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fad4 	bl	8000a2c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e211      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001492:	f7ff fc7d 	bl	8000d90 <LL_RCC_HSI_IsReady>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f1      	beq.n	8001480 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc86 	bl	8000db2 <LL_RCC_HSI_SetCalibTrimming>
 80014a6:	e013      	b.n	80014d0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a8:	f7ff fc64 	bl	8000d74 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fabe 	bl	8000a2c <HAL_GetTick>
 80014b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff faba 	bl	8000a2c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1f7      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014c6:	f7ff fc63 	bl	8000d90 <LL_RCC_HSI_IsReady>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f1      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d06e      	beq.n	80015ba <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d056      	beq.n	8001592 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ec:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d031      	beq.n	8001560 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e1d0      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d013      	beq.n	8001546 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800151e:	f7ff fc7d 	bl	8000e1c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001522:	f7ff fa83 	bl	8000a2c <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fa7f 	bl	8000a2c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b11      	cmp	r3, #17
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1bc      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800153c:	f7ff fc7e 	bl	8000e3c <LL_RCC_LSI_IsReady>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154e:	f023 0210 	bic.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800155a:	4313      	orrs	r3, r2
 800155c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001560:	f7ff fc4c 	bl	8000dfc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001564:	f7ff fa62 	bl	8000a2c <HAL_GetTick>
 8001568:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800156a:	e00c      	b.n	8001586 <HAL_RCC_OscConfig+0x3c2>
 800156c:	2000003c 	.word	0x2000003c
 8001570:	20000040 	.word	0x20000040
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fa5a 	bl	8000a2c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b11      	cmp	r3, #17
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e197      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001586:	f7ff fc59 	bl	8000e3c <LL_RCC_LSI_IsReady>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f1      	beq.n	8001574 <HAL_RCC_OscConfig+0x3b0>
 8001590:	e013      	b.n	80015ba <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001592:	f7ff fc43 	bl	8000e1c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001596:	f7ff fa49 	bl	8000a2c <HAL_GetTick>
 800159a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fa45 	bl	8000a2c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e182      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80015b0:	f7ff fc44 	bl	8000e3c <LL_RCC_LSI_IsReady>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80d8 	beq.w	8001778 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015c8:	f7ff fb5a 	bl	8000c80 <LL_PWR_IsEnabledBkUpAccess>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d113      	bne.n	80015fa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80015d2:	f7ff fb3b 	bl	8000c4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fa29 	bl	8000a2c <HAL_GetTick>
 80015da:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff fa25 	bl	8000a2c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e162      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015f0:	f7ff fb46 	bl	8000c80 <LL_PWR_IsEnabledBkUpAccess>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f1      	beq.n	80015de <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d07b      	beq.n	80016fa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b85      	cmp	r3, #133	@ 0x85
 8001608:	d003      	beq.n	8001612 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d109      	bne.n	8001626 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff fa01 	bl	8000a2c <HAL_GetTick>
 800162a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001634:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff f9f3 	bl	8000a2c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e12e      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001658:	f7ff fbbf 	bl	8000dda <LL_RCC_LSE_IsReady>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0ef      	beq.n	8001642 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b81      	cmp	r3, #129	@ 0x81
 8001668:	d003      	beq.n	8001672 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b85      	cmp	r3, #133	@ 0x85
 8001670:	d121      	bne.n	80016b6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff f9db 	bl	8000a2c <HAL_GetTick>
 8001676:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001680:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff f9cd 	bl	8000a2c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e108      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ec      	beq.n	800168e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80016b4:	e060      	b.n	8001778 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff f9b9 	bl	8000a2c <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff f9ab 	bl	8000a2c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0e6      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ec      	bne.n	80016d2 <HAL_RCC_OscConfig+0x50e>
 80016f8:	e03e      	b.n	8001778 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f997 	bl	8000a2c <HAL_GetTick>
 80016fe:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001708:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800170c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff f989 	bl	8000a2c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0c4      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ec      	bne.n	8001716 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff f976 	bl	8000a2c <HAL_GetTick>
 8001740:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff f968 	bl	8000a2c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0a3      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800176e:	f7ff fb34 	bl	8000dda <LL_RCC_LSE_IsReady>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ef      	bne.n	8001758 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8099 	beq.w	80018b4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d06c      	beq.n	8001862 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	2b02      	cmp	r3, #2
 800178e:	d14b      	bne.n	8001828 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	f7ff fc74 	bl	800107c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff f94a 	bl	8000a2c <HAL_GetTick>
 8001798:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f946 	bl	8000a2c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e083      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80017ae:	f7ff fc73 	bl	8001098 <LL_RCC_PLL_IsReady>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f1      	bne.n	800179c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b40      	ldr	r3, [pc, #256]	@ (80018c0 <HAL_RCC_OscConfig+0x6fc>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017d0:	0212      	lsls	r2, r2, #8
 80017d2:	4311      	orrs	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017de:	4311      	orrs	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017e4:	430a      	orrs	r2, r1
 80017e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ee:	f7ff fc37 	bl	8001060 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001800:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff f913 	bl	8000a2c <HAL_GetTick>
 8001806:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff f90f 	bl	8000a2c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b0a      	cmp	r3, #10
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e04c      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800181c:	f7ff fc3c 	bl	8001098 <LL_RCC_PLL_IsReady>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f1      	beq.n	800180a <HAL_RCC_OscConfig+0x646>
 8001826:	e045      	b.n	80018b4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	f7ff fc28 	bl	800107c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff f8fe 	bl	8000a2c <HAL_GetTick>
 8001830:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f8fa 	bl	8000a2c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b0a      	cmp	r3, #10
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e037      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001846:	f7ff fc27 	bl	8001098 <LL_RCC_PLL_IsReady>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f1      	bne.n	8001834 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <HAL_RCC_OscConfig+0x700>)
 800185c:	4013      	ands	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
 8001860:	e028      	b.n	80018b4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e023      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	429a      	cmp	r2, r3
 8001882:	d115      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800188e:	429a      	cmp	r2, r3
 8001890:	d10e      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	429a      	cmp	r2, r3
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	11c1808c 	.word	0x11c1808c
 80018c4:	eefefffc 	.word	0xeefefffc

080018c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e12c      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018dc:	4b98      	ldr	r3, [pc, #608]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d91b      	bls.n	8001922 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b95      	ldr	r3, [pc, #596]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 0207 	bic.w	r2, r3, #7
 80018f2:	4993      	ldr	r1, [pc, #588]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fa:	f7ff f897 	bl	8000a2c <HAL_GetTick>
 80018fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001900:	e008      	b.n	8001914 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001902:	f7ff f893 	bl	8000a2c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e110      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	4b8a      	ldr	r3, [pc, #552]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d1ef      	bne.n	8001902 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d016      	beq.n	800195c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb18 	bl	8000f68 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001938:	f7ff f878 	bl	8000a2c <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001940:	f7ff f874 	bl	8000a2c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0f1      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001952:	f7ff fbdf 	bl	8001114 <LL_RCC_IsActiveFlag_HPRE>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f1      	beq.n	8001940 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fb0e 	bl	8000f8e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001972:	f7ff f85b 	bl	8000a2c <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800197a:	f7ff f857 	bl	8000a2c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0d4      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800198c:	f7ff fbd3 	bl	8001136 <LL_RCC_IsActiveFlag_C2HPRE>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f1      	beq.n	800197a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d016      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fb06 	bl	8000fb8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019ac:	f7ff f83e 	bl	8000a2c <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019b4:	f7ff f83a 	bl	8000a2c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0b7      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019c6:	f7ff fbc8 	bl	800115a <LL_RCC_IsActiveFlag_SHDHPRE>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f1      	beq.n	80019b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d016      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff faff 	bl	8000fe4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019e6:	f7ff f821 	bl	8000a2c <HAL_GetTick>
 80019ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019ee:	f7ff f81d 	bl	8000a2c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e09a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a00:	f7ff fbbd 	bl	800117e <LL_RCC_IsActiveFlag_PPRE1>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f1      	beq.n	80019ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d017      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff faf4 	bl	800100a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a22:	f7ff f803 	bl	8000a2c <HAL_GetTick>
 8001a26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a2a:	f7fe ffff 	bl	8000a2c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e07c      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a3c:	f7ff fbb0 	bl	80011a0 <LL_RCC_IsActiveFlag_PPRE2>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f1      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d043      	beq.n	8001ada <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d106      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001a5a:	f7ff f96c 	bl	8000d36 <LL_RCC_HSE_IsReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d11e      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e066      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001a70:	f7ff fb12 	bl	8001098 <LL_RCC_PLL_IsReady>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d113      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e05b      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001a86:	f7ff fa06 	bl	8000e96 <LL_RCC_MSI_IsReady>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d108      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e050      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001a94:	f7ff f97c 	bl	8000d90 <LL_RCC_HSI_IsReady>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e049      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fa40 	bl	8000f2c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7fe ffbe 	bl	8000a2c <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7fe ffba 	bl	8000a2c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e035      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	f7ff fa42 	bl	8000f52 <LL_RCC_GetSysClkSource>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d1ec      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d21b      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 0207 	bic.w	r2, r3, #7
 8001af0:	4913      	ldr	r1, [pc, #76]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7fe ff98 	bl	8000a2c <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b00:	f7fe ff94 	bl	8000a2c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e011      	b.n	8001b36 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_RCC_ClockConfig+0x278>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1ef      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b20:	f000 f8b4 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_RCC_ClockConfig+0x27c>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <HAL_RCC_ClockConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe ff30 	bl	8000994 <HAL_InitTick>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	58004000 	.word	0x58004000
 8001b44:	2000003c 	.word	0x2000003c
 8001b48:	20000040 	.word	0x20000040

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	f7ff f9fa 	bl	8000f52 <LL_RCC_GetSysClkSource>
 8001b5e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	f7ff facd 	bl	80010fe <LL_RCC_PLL_GetMainSource>
 8001b64:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x2c>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d139      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d136      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001b78:	f7ff f99d 	bl	8000eb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <HAL_RCC_GetSysClockFreq+0x62>
 8001b82:	f7ff f998 	bl	8000eb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x4e>
 8001b8c:	f7ff f9a3 	bl	8000ed6 <LL_RCC_MSI_GetRange>
 8001b90:	4603      	mov	r3, r0
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	e005      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x5a>
 8001b9a:	f7ff f9a7 	bl	8000eec <LL_RCC_MSI_GetRangeAfterStandby>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a36      	ldr	r2, [pc, #216]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x134>)
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x8c>
 8001bae:	f7ff f982 	bl	8000eb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x7a>
 8001bb8:	f7ff f98d 	bl	8000ed6 <LL_RCC_MSI_GetRange>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	e005      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x86>
 8001bc6:	f7ff f991 	bl	8000eec <LL_RCC_MSI_GetRangeAfterStandby>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x134>)
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d115      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001be4:	e012      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bec:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e00c      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d109      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001bf8:	f7ff f870 	bl	8000cdc <LL_RCC_HSE_IsEnabledDiv2>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e001      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c0a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	f7ff f9a1 	bl	8000f52 <LL_RCC_GetSysClkSource>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d12f      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c16:	f7ff fa72 	bl	80010fe <LL_RCC_PLL_GetMainSource>
 8001c1a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d003      	beq.n	8001c2a <HAL_RCC_GetSysClockFreq+0xde>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d003      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0xe4>
 8001c28:	e00d      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c2c:	60fb      	str	r3, [r7, #12]
        break;
 8001c2e:	e00d      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c30:	f7ff f854 	bl	8000cdc <LL_RCC_HSE_IsEnabledDiv2>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c3c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c3e:	e005      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c42:	60fb      	str	r3, [r7, #12]
        break;
 8001c44:	e002      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	60fb      	str	r3, [r7, #12]
        break;
 8001c4a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001c4c:	f7ff fa35 	bl	80010ba <LL_RCC_PLL_GetN>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	fb03 f402 	mul.w	r4, r3, r2
 8001c58:	f7ff fa46 	bl	80010e8 <LL_RCC_PLL_GetDivider>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	3301      	adds	r3, #1
 8001c62:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c66:	f7ff fa34 	bl	80010d2 <LL_RCC_PLL_GetR>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	0f5b      	lsrs	r3, r3, #29
 8001c6e:	3301      	adds	r3, #1
 8001c70:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c74:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c76:	697b      	ldr	r3, [r7, #20]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	0800328c 	.word	0x0800328c
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	01e84800 	.word	0x01e84800

08001c8c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b598      	push	{r3, r4, r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001c90:	f7ff ff5c 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001c94:	4604      	mov	r4, r0
 8001c96:	f7ff f9cb 	bl	8001030 <LL_RCC_GetAHBPrescaler>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd98      	pop	{r3, r4, r7, pc}
 8001cb0:	0800324c 	.word	0x0800324c

08001cb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001ccc:	f7ff f9bb 	bl	8001046 <LL_RCC_GetAHB3Prescaler>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9c      	lsrs	r4, r3, #18
 8001cf0:	f7fe ffba 	bl	8000c68 <HAL_PWREx_GetVoltageRange>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f000 f80b 	bl	8001d14 <RCC_SetFlashLatency>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	0800328c 	.word	0x0800328c
 8001d0c:	0800324c 	.word	0x0800324c
 8001d10:	431bde83 	.word	0x431bde83

08001d14 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	@ 0x38
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001d1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e08 <RCC_SetFlashLatency+0xf4>)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d28:	6018      	str	r0, [r3, #0]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001d2e:	4a37      	ldr	r2, [pc, #220]	@ (8001e0c <RCC_SetFlashLatency+0xf8>)
 8001d30:	f107 0318 	add.w	r3, r7, #24
 8001d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d38:	6018      	str	r0, [r3, #0]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001d3e:	4a34      	ldr	r2, [pc, #208]	@ (8001e10 <RCC_SetFlashLatency+0xfc>)
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d54:	d11b      	bne.n	8001d8e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d5a:	e014      	b.n	8001d86 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	3338      	adds	r3, #56	@ 0x38
 8001d62:	443b      	add	r3, r7
 8001d64:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d807      	bhi.n	8001d80 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3338      	adds	r3, #56	@ 0x38
 8001d76:	443b      	add	r3, r7
 8001d78:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001d7e:	e021      	b.n	8001dc4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d82:	3301      	adds	r3, #1
 8001d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d9e7      	bls.n	8001d5c <RCC_SetFlashLatency+0x48>
 8001d8c:	e01a      	b.n	8001dc4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d92:	e014      	b.n	8001dbe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	3338      	adds	r3, #56	@ 0x38
 8001d9a:	443b      	add	r3, r7
 8001d9c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d807      	bhi.n	8001db8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3338      	adds	r3, #56	@ 0x38
 8001dae:	443b      	add	r3, r7
 8001db0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001db4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001db6:	e005      	b.n	8001dc4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dba:	3301      	adds	r3, #1
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d9e7      	bls.n	8001d94 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <RCC_SetFlashLatency+0x100>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0207 	bic.w	r2, r3, #7
 8001dcc:	4911      	ldr	r1, [pc, #68]	@ (8001e14 <RCC_SetFlashLatency+0x100>)
 8001dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001dd4:	f7fe fe2a 	bl	8000a2c <HAL_GetTick>
 8001dd8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dda:	e008      	b.n	8001dee <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ddc:	f7fe fe26 	bl	8000a2c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e007      	b.n	8001dfe <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <RCC_SetFlashLatency+0x100>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1ef      	bne.n	8001ddc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3738      	adds	r7, #56	@ 0x38
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	08003230 	.word	0x08003230
 8001e0c:	08003238 	.word	0x08003238
 8001e10:	08003240 	.word	0x08003240
 8001e14:	58004000 	.word	0x58004000

08001e18 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001e28:	4904      	ldr	r1, [pc, #16]	@ (8001e3c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58000400 	.word	0x58000400

08001e40 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4a:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8001e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	58000400 	.word	0x58000400

08001e60 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8001e6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	58000400 	.word	0x58000400

08001e80 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8001e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e8a:	619a      	str	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	58000400 	.word	0x58000400

08001e98 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d101      	bne.n	8001eac <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	58000400 	.word	0x58000400

08001ebc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d101      	bne.n	8001ed0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	58000400 	.word	0x58000400

08001ee0 <LL_RCC_RF_DisableReset>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ef0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_IsRFUnderReset>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f14:	d101      	bne.n	8001f1a <LL_RCC_IsRFUnderReset+0x1a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_RCC_IsRFUnderReset+0x1c>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <LL_EXTI_EnableIT_32_63+0x24>)
 8001f2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001f32:	4905      	ldr	r1, [pc, #20]	@ (8001f48 <LL_EXTI_EnableIT_32_63+0x24>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	58000800 	.word	0x58000800

08001f4c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
    return status;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	e052      	b.n	8002008 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	799b      	ldrb	r3, [r3, #6]
 8001f6a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_SUBGHZ_Init+0x2c>
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d109      	bne.n	8001f8c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fbff 	bl	8000782 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8001f84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001f88:	f7ff ffcc 	bl	8001f24 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d126      	bne.n	8001fe0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8001f98:	f7ff ffa2 	bl	8001ee0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <HAL_SUBGHZ_Init+0xc4>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	0cdb      	lsrs	r3, r3, #19
 8001faa:	2264      	movs	r2, #100	@ 0x64
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]
        break;
 8001fc2:	e007      	b.n	8001fd4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8001fca:	f7ff ff99 	bl	8001f00 <LL_RCC_IsRFUnderReset>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8001fd4:	f7ff ff34 	bl	8001e40 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8001fd8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001fdc:	f7ff ff1c 	bl	8001e18 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8001fe0:	f7ff ff4e 	bl	8001e80 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10a      	bne.n	8002000 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f8c4 	bl	800217c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	719a      	strb	r2, [r3, #6]

  return status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000003c 	.word	0x2000003c

08002014 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	461a      	mov	r2, r3
 8002020:	460b      	mov	r3, r1
 8002022:	72fb      	strb	r3, [r7, #11]
 8002024:	4613      	mov	r3, r2
 8002026:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	799b      	ldrb	r3, [r3, #6]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d14a      	bne.n	80020c8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	795b      	ldrb	r3, [r3, #5]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800203a:	2302      	movs	r3, #2
 800203c:	e045      	b.n	80020ca <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f967 	bl	8002318 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	2b84      	cmp	r3, #132	@ 0x84
 800204e:	d002      	beq.n	8002056 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	2b94      	cmp	r3, #148	@ 0x94
 8002054:	d103      	bne.n	800205e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	711a      	strb	r2, [r3, #4]
 800205c:	e002      	b.n	8002064 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002064:	f7ff fefc 	bl	8001e60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	4619      	mov	r1, r3
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f8a5 	bl	80021bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	82bb      	strh	r3, [r7, #20]
 8002076:	e00a      	b.n	800208e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002078:	8abb      	ldrh	r3, [r7, #20]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f89a 	bl	80021bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002088:	8abb      	ldrh	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	82bb      	strh	r3, [r7, #20]
 800208e:	8aba      	ldrh	r2, [r7, #20]
 8002090:	893b      	ldrh	r3, [r7, #8]
 8002092:	429a      	cmp	r2, r3
 8002094:	d3f0      	bcc.n	8002078 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002096:	f7ff fed3 	bl	8001e40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800209a:	7afb      	ldrb	r3, [r7, #11]
 800209c:	2b84      	cmp	r3, #132	@ 0x84
 800209e:	d002      	beq.n	80020a6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f95d 	bl	8002360 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
 80020b2:	e001      	b.n	80020b8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	715a      	strb	r2, [r3, #5]

    return status;
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	e000      	b.n	80020ca <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b088      	sub	sp, #32
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	461a      	mov	r2, r3
 80020de:	460b      	mov	r3, r1
 80020e0:	72fb      	strb	r3, [r7, #11]
 80020e2:	4613      	mov	r3, r2
 80020e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	799b      	ldrb	r3, [r3, #6]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d13d      	bne.n	8002170 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	795b      	ldrb	r3, [r3, #5]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e038      	b.n	8002172 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f906 	bl	8002318 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800210c:	f7ff fea8 	bl	8001e60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	4619      	mov	r1, r3
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f851 	bl	80021bc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800211a:	2100      	movs	r1, #0
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f84d 	bl	80021bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	82fb      	strh	r3, [r7, #22]
 8002126:	e009      	b.n	800213c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002128:	69b9      	ldr	r1, [r7, #24]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f89c 	bl	8002268 <SUBGHZSPI_Receive>
      pData++;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	3301      	adds	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002136:	8afb      	ldrh	r3, [r7, #22]
 8002138:	3301      	adds	r3, #1
 800213a:	82fb      	strh	r3, [r7, #22]
 800213c:	8afa      	ldrh	r2, [r7, #22]
 800213e:	893b      	ldrh	r3, [r7, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	d3f1      	bcc.n	8002128 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002144:	f7ff fe7c 	bl	8001e40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f909 	bl	8002360 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	77fb      	strb	r3, [r7, #31]
 800215a:	e001      	b.n	8002160 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	715a      	strb	r2, [r3, #5]

    return status;
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	e000      	b.n	8002172 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002184:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <SUBGHZSPI_Init+0x3c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0b      	ldr	r2, [pc, #44]	@ (80021b8 <SUBGHZSPI_Init+0x3c>)
 800218a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800218e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002190:	4a09      	ldr	r2, [pc, #36]	@ (80021b8 <SUBGHZSPI_Init+0x3c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8002198:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <SUBGHZSPI_Init+0x3c>)
 800219c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80021a0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80021a2:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <SUBGHZSPI_Init+0x3c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <SUBGHZSPI_Init+0x3c>)
 80021a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ac:	6013      	str	r3, [r2, #0]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	58010000 	.word	0x58010000

080021bc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <SUBGHZSPI_Transmit+0xa0>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	0cdb      	lsrs	r3, r3, #19
 80021da:	2264      	movs	r2, #100	@ 0x64
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	609a      	str	r2, [r3, #8]
      break;
 80021f2:	e008      	b.n	8002206 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80021fa:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <SUBGHZSPI_Transmit+0xa4>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d1ed      	bne.n	80021e2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002206:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <SUBGHZSPI_Transmit+0xa8>)
 8002208:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <SUBGHZSPI_Transmit+0xa0>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	0cdb      	lsrs	r3, r3, #19
 800221e:	2264      	movs	r2, #100	@ 0x64
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	609a      	str	r2, [r3, #8]
      break;
 8002236:	e008      	b.n	800224a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3b01      	subs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <SUBGHZSPI_Transmit+0xa4>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d1ed      	bne.n	8002226 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <SUBGHZSPI_Transmit+0xa4>)
 800224c:	68db      	ldr	r3, [r3, #12]

  return status;
 800224e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000003c 	.word	0x2000003c
 8002260:	58010000 	.word	0x58010000
 8002264:	5801000c 	.word	0x5801000c

08002268 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002276:	4b25      	ldr	r3, [pc, #148]	@ (800230c <SUBGHZSPI_Receive+0xa4>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	0cdb      	lsrs	r3, r3, #19
 8002284:	2264      	movs	r2, #100	@ 0x64
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	609a      	str	r2, [r3, #8]
      break;
 800229c:	e008      	b.n	80022b0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <SUBGHZSPI_Receive+0xa8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d1ed      	bne.n	800228c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80022b0:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <SUBGHZSPI_Receive+0xac>)
 80022b2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	22ff      	movs	r2, #255	@ 0xff
 80022b8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <SUBGHZSPI_Receive+0xa4>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	0cdb      	lsrs	r3, r3, #19
 80022c8:	2264      	movs	r2, #100	@ 0x64
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	609a      	str	r2, [r3, #8]
      break;
 80022e0:	e008      	b.n	80022f4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <SUBGHZSPI_Receive+0xa8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d1ed      	bne.n	80022d0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <SUBGHZSPI_Receive+0xa8>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	701a      	strb	r2, [r3, #0]

  return status;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002300:	4618      	mov	r0, r3
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000003c 	.word	0x2000003c
 8002310:	58010000 	.word	0x58010000
 8002314:	5801000c 	.word	0x5801000c

08002318 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	791b      	ldrb	r3, [r3, #4]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d111      	bne.n	800234c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <SUBGHZ_CheckDeviceReady+0x44>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002338:	f7ff fd92 	bl	8001e60 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3b01      	subs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002348:	f7ff fd7a 	bl	8001e40 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f807 	bl	8002360 <SUBGHZ_WaitOnBusy>
 8002352:	4603      	mov	r3, r0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	2000003c 	.word	0x2000003c

08002360 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <SUBGHZ_WaitOnBusy+0x58>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	0d1b      	lsrs	r3, r3, #20
 800237a:	2264      	movs	r2, #100	@ 0x64
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8002382:	f7ff fd9b 	bl	8001ebc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8002386:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	609a      	str	r2, [r3, #8]
      break;
 8002398:	e009      	b.n	80023ae <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3b01      	subs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80023a0:	f7ff fd7a 	bl	8001e98 <LL_PWR_IsActiveFlag_RFBUSYS>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d0e9      	beq.n	8002382 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000003c 	.word	0x2000003c

080023bc <std>:
 80023bc:	2300      	movs	r3, #0
 80023be:	b510      	push	{r4, lr}
 80023c0:	4604      	mov	r4, r0
 80023c2:	e9c0 3300 	strd	r3, r3, [r0]
 80023c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023ca:	6083      	str	r3, [r0, #8]
 80023cc:	8181      	strh	r1, [r0, #12]
 80023ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80023d0:	81c2      	strh	r2, [r0, #14]
 80023d2:	6183      	str	r3, [r0, #24]
 80023d4:	4619      	mov	r1, r3
 80023d6:	2208      	movs	r2, #8
 80023d8:	305c      	adds	r0, #92	@ 0x5c
 80023da:	f000 f906 	bl	80025ea <memset>
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <std+0x58>)
 80023e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <std+0x5c>)
 80023e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <std+0x60>)
 80023e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <std+0x64>)
 80023ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <std+0x68>)
 80023f0:	6224      	str	r4, [r4, #32]
 80023f2:	429c      	cmp	r4, r3
 80023f4:	d006      	beq.n	8002404 <std+0x48>
 80023f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023fa:	4294      	cmp	r4, r2
 80023fc:	d002      	beq.n	8002404 <std+0x48>
 80023fe:	33d0      	adds	r3, #208	@ 0xd0
 8002400:	429c      	cmp	r4, r3
 8002402:	d105      	bne.n	8002410 <std+0x54>
 8002404:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800240c:	f000 b966 	b.w	80026dc <__retarget_lock_init_recursive>
 8002410:	bd10      	pop	{r4, pc}
 8002412:	bf00      	nop
 8002414:	08002565 	.word	0x08002565
 8002418:	08002587 	.word	0x08002587
 800241c:	080025bf 	.word	0x080025bf
 8002420:	080025e3 	.word	0x080025e3
 8002424:	200000e4 	.word	0x200000e4

08002428 <stdio_exit_handler>:
 8002428:	4a02      	ldr	r2, [pc, #8]	@ (8002434 <stdio_exit_handler+0xc>)
 800242a:	4903      	ldr	r1, [pc, #12]	@ (8002438 <stdio_exit_handler+0x10>)
 800242c:	4803      	ldr	r0, [pc, #12]	@ (800243c <stdio_exit_handler+0x14>)
 800242e:	f000 b869 	b.w	8002504 <_fwalk_sglue>
 8002432:	bf00      	nop
 8002434:	20000048 	.word	0x20000048
 8002438:	08002f71 	.word	0x08002f71
 800243c:	20000058 	.word	0x20000058

08002440 <cleanup_stdio>:
 8002440:	6841      	ldr	r1, [r0, #4]
 8002442:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <cleanup_stdio+0x34>)
 8002444:	4299      	cmp	r1, r3
 8002446:	b510      	push	{r4, lr}
 8002448:	4604      	mov	r4, r0
 800244a:	d001      	beq.n	8002450 <cleanup_stdio+0x10>
 800244c:	f000 fd90 	bl	8002f70 <_fflush_r>
 8002450:	68a1      	ldr	r1, [r4, #8]
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <cleanup_stdio+0x38>)
 8002454:	4299      	cmp	r1, r3
 8002456:	d002      	beq.n	800245e <cleanup_stdio+0x1e>
 8002458:	4620      	mov	r0, r4
 800245a:	f000 fd89 	bl	8002f70 <_fflush_r>
 800245e:	68e1      	ldr	r1, [r4, #12]
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <cleanup_stdio+0x3c>)
 8002462:	4299      	cmp	r1, r3
 8002464:	d004      	beq.n	8002470 <cleanup_stdio+0x30>
 8002466:	4620      	mov	r0, r4
 8002468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800246c:	f000 bd80 	b.w	8002f70 <_fflush_r>
 8002470:	bd10      	pop	{r4, pc}
 8002472:	bf00      	nop
 8002474:	200000e4 	.word	0x200000e4
 8002478:	2000014c 	.word	0x2000014c
 800247c:	200001b4 	.word	0x200001b4

08002480 <global_stdio_init.part.0>:
 8002480:	b510      	push	{r4, lr}
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <global_stdio_init.part.0+0x30>)
 8002484:	4c0b      	ldr	r4, [pc, #44]	@ (80024b4 <global_stdio_init.part.0+0x34>)
 8002486:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <global_stdio_init.part.0+0x38>)
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	4620      	mov	r0, r4
 800248c:	2200      	movs	r2, #0
 800248e:	2104      	movs	r1, #4
 8002490:	f7ff ff94 	bl	80023bc <std>
 8002494:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002498:	2201      	movs	r2, #1
 800249a:	2109      	movs	r1, #9
 800249c:	f7ff ff8e 	bl	80023bc <std>
 80024a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80024a4:	2202      	movs	r2, #2
 80024a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024aa:	2112      	movs	r1, #18
 80024ac:	f7ff bf86 	b.w	80023bc <std>
 80024b0:	2000021c 	.word	0x2000021c
 80024b4:	200000e4 	.word	0x200000e4
 80024b8:	08002429 	.word	0x08002429

080024bc <__sfp_lock_acquire>:
 80024bc:	4801      	ldr	r0, [pc, #4]	@ (80024c4 <__sfp_lock_acquire+0x8>)
 80024be:	f000 b90e 	b.w	80026de <__retarget_lock_acquire_recursive>
 80024c2:	bf00      	nop
 80024c4:	20000225 	.word	0x20000225

080024c8 <__sfp_lock_release>:
 80024c8:	4801      	ldr	r0, [pc, #4]	@ (80024d0 <__sfp_lock_release+0x8>)
 80024ca:	f000 b909 	b.w	80026e0 <__retarget_lock_release_recursive>
 80024ce:	bf00      	nop
 80024d0:	20000225 	.word	0x20000225

080024d4 <__sinit>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	4604      	mov	r4, r0
 80024d8:	f7ff fff0 	bl	80024bc <__sfp_lock_acquire>
 80024dc:	6a23      	ldr	r3, [r4, #32]
 80024de:	b11b      	cbz	r3, 80024e8 <__sinit+0x14>
 80024e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e4:	f7ff bff0 	b.w	80024c8 <__sfp_lock_release>
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <__sinit+0x28>)
 80024ea:	6223      	str	r3, [r4, #32]
 80024ec:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <__sinit+0x2c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f5      	bne.n	80024e0 <__sinit+0xc>
 80024f4:	f7ff ffc4 	bl	8002480 <global_stdio_init.part.0>
 80024f8:	e7f2      	b.n	80024e0 <__sinit+0xc>
 80024fa:	bf00      	nop
 80024fc:	08002441 	.word	0x08002441
 8002500:	2000021c 	.word	0x2000021c

08002504 <_fwalk_sglue>:
 8002504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002508:	4607      	mov	r7, r0
 800250a:	4688      	mov	r8, r1
 800250c:	4614      	mov	r4, r2
 800250e:	2600      	movs	r6, #0
 8002510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002514:	f1b9 0901 	subs.w	r9, r9, #1
 8002518:	d505      	bpl.n	8002526 <_fwalk_sglue+0x22>
 800251a:	6824      	ldr	r4, [r4, #0]
 800251c:	2c00      	cmp	r4, #0
 800251e:	d1f7      	bne.n	8002510 <_fwalk_sglue+0xc>
 8002520:	4630      	mov	r0, r6
 8002522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002526:	89ab      	ldrh	r3, [r5, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d907      	bls.n	800253c <_fwalk_sglue+0x38>
 800252c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002530:	3301      	adds	r3, #1
 8002532:	d003      	beq.n	800253c <_fwalk_sglue+0x38>
 8002534:	4629      	mov	r1, r5
 8002536:	4638      	mov	r0, r7
 8002538:	47c0      	blx	r8
 800253a:	4306      	orrs	r6, r0
 800253c:	3568      	adds	r5, #104	@ 0x68
 800253e:	e7e9      	b.n	8002514 <_fwalk_sglue+0x10>

08002540 <iprintf>:
 8002540:	b40f      	push	{r0, r1, r2, r3}
 8002542:	b507      	push	{r0, r1, r2, lr}
 8002544:	4906      	ldr	r1, [pc, #24]	@ (8002560 <iprintf+0x20>)
 8002546:	ab04      	add	r3, sp, #16
 8002548:	6808      	ldr	r0, [r1, #0]
 800254a:	f853 2b04 	ldr.w	r2, [r3], #4
 800254e:	6881      	ldr	r1, [r0, #8]
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	f000 f9e7 	bl	8002924 <_vfiprintf_r>
 8002556:	b003      	add	sp, #12
 8002558:	f85d eb04 	ldr.w	lr, [sp], #4
 800255c:	b004      	add	sp, #16
 800255e:	4770      	bx	lr
 8002560:	20000054 	.word	0x20000054

08002564 <__sread>:
 8002564:	b510      	push	{r4, lr}
 8002566:	460c      	mov	r4, r1
 8002568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800256c:	f000 f868 	bl	8002640 <_read_r>
 8002570:	2800      	cmp	r0, #0
 8002572:	bfab      	itete	ge
 8002574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002576:	89a3      	ldrhlt	r3, [r4, #12]
 8002578:	181b      	addge	r3, r3, r0
 800257a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800257e:	bfac      	ite	ge
 8002580:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002582:	81a3      	strhlt	r3, [r4, #12]
 8002584:	bd10      	pop	{r4, pc}

08002586 <__swrite>:
 8002586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800258a:	461f      	mov	r7, r3
 800258c:	898b      	ldrh	r3, [r1, #12]
 800258e:	05db      	lsls	r3, r3, #23
 8002590:	4605      	mov	r5, r0
 8002592:	460c      	mov	r4, r1
 8002594:	4616      	mov	r6, r2
 8002596:	d505      	bpl.n	80025a4 <__swrite+0x1e>
 8002598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800259c:	2302      	movs	r3, #2
 800259e:	2200      	movs	r2, #0
 80025a0:	f000 f83c 	bl	800261c <_lseek_r>
 80025a4:	89a3      	ldrh	r3, [r4, #12]
 80025a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025ae:	81a3      	strh	r3, [r4, #12]
 80025b0:	4632      	mov	r2, r6
 80025b2:	463b      	mov	r3, r7
 80025b4:	4628      	mov	r0, r5
 80025b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025ba:	f000 b853 	b.w	8002664 <_write_r>

080025be <__sseek>:
 80025be:	b510      	push	{r4, lr}
 80025c0:	460c      	mov	r4, r1
 80025c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c6:	f000 f829 	bl	800261c <_lseek_r>
 80025ca:	1c43      	adds	r3, r0, #1
 80025cc:	89a3      	ldrh	r3, [r4, #12]
 80025ce:	bf15      	itete	ne
 80025d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80025d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80025d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80025da:	81a3      	strheq	r3, [r4, #12]
 80025dc:	bf18      	it	ne
 80025de:	81a3      	strhne	r3, [r4, #12]
 80025e0:	bd10      	pop	{r4, pc}

080025e2 <__sclose>:
 80025e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025e6:	f000 b809 	b.w	80025fc <_close_r>

080025ea <memset>:
 80025ea:	4402      	add	r2, r0
 80025ec:	4603      	mov	r3, r0
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d100      	bne.n	80025f4 <memset+0xa>
 80025f2:	4770      	bx	lr
 80025f4:	f803 1b01 	strb.w	r1, [r3], #1
 80025f8:	e7f9      	b.n	80025ee <memset+0x4>
	...

080025fc <_close_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4d06      	ldr	r5, [pc, #24]	@ (8002618 <_close_r+0x1c>)
 8002600:	2300      	movs	r3, #0
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	602b      	str	r3, [r5, #0]
 8002608:	f7fe f938 	bl	800087c <_close>
 800260c:	1c43      	adds	r3, r0, #1
 800260e:	d102      	bne.n	8002616 <_close_r+0x1a>
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	b103      	cbz	r3, 8002616 <_close_r+0x1a>
 8002614:	6023      	str	r3, [r4, #0]
 8002616:	bd38      	pop	{r3, r4, r5, pc}
 8002618:	20000220 	.word	0x20000220

0800261c <_lseek_r>:
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4d07      	ldr	r5, [pc, #28]	@ (800263c <_lseek_r+0x20>)
 8002620:	4604      	mov	r4, r0
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	2200      	movs	r2, #0
 8002628:	602a      	str	r2, [r5, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	f7fe f94a 	bl	80008c4 <_lseek>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d102      	bne.n	800263a <_lseek_r+0x1e>
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	b103      	cbz	r3, 800263a <_lseek_r+0x1e>
 8002638:	6023      	str	r3, [r4, #0]
 800263a:	bd38      	pop	{r3, r4, r5, pc}
 800263c:	20000220 	.word	0x20000220

08002640 <_read_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	4d07      	ldr	r5, [pc, #28]	@ (8002660 <_read_r+0x20>)
 8002644:	4604      	mov	r4, r0
 8002646:	4608      	mov	r0, r1
 8002648:	4611      	mov	r1, r2
 800264a:	2200      	movs	r2, #0
 800264c:	602a      	str	r2, [r5, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	f7fe f8db 	bl	800080a <_read>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_read_r+0x1e>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	b103      	cbz	r3, 800265e <_read_r+0x1e>
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	20000220 	.word	0x20000220

08002664 <_write_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4d07      	ldr	r5, [pc, #28]	@ (8002684 <_write_r+0x20>)
 8002668:	4604      	mov	r4, r0
 800266a:	4608      	mov	r0, r1
 800266c:	4611      	mov	r1, r2
 800266e:	2200      	movs	r2, #0
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	f7fe f8e6 	bl	8000844 <_write>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_write_r+0x1e>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_write_r+0x1e>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	20000220 	.word	0x20000220

08002688 <__errno>:
 8002688:	4b01      	ldr	r3, [pc, #4]	@ (8002690 <__errno+0x8>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000054 	.word	0x20000054

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4d0d      	ldr	r5, [pc, #52]	@ (80026cc <__libc_init_array+0x38>)
 8002698:	4c0d      	ldr	r4, [pc, #52]	@ (80026d0 <__libc_init_array+0x3c>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	2600      	movs	r6, #0
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	4d0b      	ldr	r5, [pc, #44]	@ (80026d4 <__libc_init_array+0x40>)
 80026a6:	4c0c      	ldr	r4, [pc, #48]	@ (80026d8 <__libc_init_array+0x44>)
 80026a8:	f000 fdb2 	bl	8003210 <_init>
 80026ac:	1b64      	subs	r4, r4, r5
 80026ae:	10a4      	asrs	r4, r4, #2
 80026b0:	2600      	movs	r6, #0
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08003308 	.word	0x08003308
 80026d0:	08003308 	.word	0x08003308
 80026d4:	08003308 	.word	0x08003308
 80026d8:	0800330c 	.word	0x0800330c

080026dc <__retarget_lock_init_recursive>:
 80026dc:	4770      	bx	lr

080026de <__retarget_lock_acquire_recursive>:
 80026de:	4770      	bx	lr

080026e0 <__retarget_lock_release_recursive>:
 80026e0:	4770      	bx	lr
	...

080026e4 <_free_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4605      	mov	r5, r0
 80026e8:	2900      	cmp	r1, #0
 80026ea:	d041      	beq.n	8002770 <_free_r+0x8c>
 80026ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026f0:	1f0c      	subs	r4, r1, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bfb8      	it	lt
 80026f6:	18e4      	addlt	r4, r4, r3
 80026f8:	f000 f8e0 	bl	80028bc <__malloc_lock>
 80026fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002774 <_free_r+0x90>)
 80026fe:	6813      	ldr	r3, [r2, #0]
 8002700:	b933      	cbnz	r3, 8002710 <_free_r+0x2c>
 8002702:	6063      	str	r3, [r4, #4]
 8002704:	6014      	str	r4, [r2, #0]
 8002706:	4628      	mov	r0, r5
 8002708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800270c:	f000 b8dc 	b.w	80028c8 <__malloc_unlock>
 8002710:	42a3      	cmp	r3, r4
 8002712:	d908      	bls.n	8002726 <_free_r+0x42>
 8002714:	6820      	ldr	r0, [r4, #0]
 8002716:	1821      	adds	r1, r4, r0
 8002718:	428b      	cmp	r3, r1
 800271a:	bf01      	itttt	eq
 800271c:	6819      	ldreq	r1, [r3, #0]
 800271e:	685b      	ldreq	r3, [r3, #4]
 8002720:	1809      	addeq	r1, r1, r0
 8002722:	6021      	streq	r1, [r4, #0]
 8002724:	e7ed      	b.n	8002702 <_free_r+0x1e>
 8002726:	461a      	mov	r2, r3
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b10b      	cbz	r3, 8002730 <_free_r+0x4c>
 800272c:	42a3      	cmp	r3, r4
 800272e:	d9fa      	bls.n	8002726 <_free_r+0x42>
 8002730:	6811      	ldr	r1, [r2, #0]
 8002732:	1850      	adds	r0, r2, r1
 8002734:	42a0      	cmp	r0, r4
 8002736:	d10b      	bne.n	8002750 <_free_r+0x6c>
 8002738:	6820      	ldr	r0, [r4, #0]
 800273a:	4401      	add	r1, r0
 800273c:	1850      	adds	r0, r2, r1
 800273e:	4283      	cmp	r3, r0
 8002740:	6011      	str	r1, [r2, #0]
 8002742:	d1e0      	bne.n	8002706 <_free_r+0x22>
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	6053      	str	r3, [r2, #4]
 800274a:	4408      	add	r0, r1
 800274c:	6010      	str	r0, [r2, #0]
 800274e:	e7da      	b.n	8002706 <_free_r+0x22>
 8002750:	d902      	bls.n	8002758 <_free_r+0x74>
 8002752:	230c      	movs	r3, #12
 8002754:	602b      	str	r3, [r5, #0]
 8002756:	e7d6      	b.n	8002706 <_free_r+0x22>
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	1821      	adds	r1, r4, r0
 800275c:	428b      	cmp	r3, r1
 800275e:	bf04      	itt	eq
 8002760:	6819      	ldreq	r1, [r3, #0]
 8002762:	685b      	ldreq	r3, [r3, #4]
 8002764:	6063      	str	r3, [r4, #4]
 8002766:	bf04      	itt	eq
 8002768:	1809      	addeq	r1, r1, r0
 800276a:	6021      	streq	r1, [r4, #0]
 800276c:	6054      	str	r4, [r2, #4]
 800276e:	e7ca      	b.n	8002706 <_free_r+0x22>
 8002770:	bd38      	pop	{r3, r4, r5, pc}
 8002772:	bf00      	nop
 8002774:	2000022c 	.word	0x2000022c

08002778 <sbrk_aligned>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	4e0f      	ldr	r6, [pc, #60]	@ (80027b8 <sbrk_aligned+0x40>)
 800277c:	460c      	mov	r4, r1
 800277e:	6831      	ldr	r1, [r6, #0]
 8002780:	4605      	mov	r5, r0
 8002782:	b911      	cbnz	r1, 800278a <sbrk_aligned+0x12>
 8002784:	f000 fcb0 	bl	80030e8 <_sbrk_r>
 8002788:	6030      	str	r0, [r6, #0]
 800278a:	4621      	mov	r1, r4
 800278c:	4628      	mov	r0, r5
 800278e:	f000 fcab 	bl	80030e8 <_sbrk_r>
 8002792:	1c43      	adds	r3, r0, #1
 8002794:	d103      	bne.n	800279e <sbrk_aligned+0x26>
 8002796:	f04f 34ff 	mov.w	r4, #4294967295
 800279a:	4620      	mov	r0, r4
 800279c:	bd70      	pop	{r4, r5, r6, pc}
 800279e:	1cc4      	adds	r4, r0, #3
 80027a0:	f024 0403 	bic.w	r4, r4, #3
 80027a4:	42a0      	cmp	r0, r4
 80027a6:	d0f8      	beq.n	800279a <sbrk_aligned+0x22>
 80027a8:	1a21      	subs	r1, r4, r0
 80027aa:	4628      	mov	r0, r5
 80027ac:	f000 fc9c 	bl	80030e8 <_sbrk_r>
 80027b0:	3001      	adds	r0, #1
 80027b2:	d1f2      	bne.n	800279a <sbrk_aligned+0x22>
 80027b4:	e7ef      	b.n	8002796 <sbrk_aligned+0x1e>
 80027b6:	bf00      	nop
 80027b8:	20000228 	.word	0x20000228

080027bc <_malloc_r>:
 80027bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027c0:	1ccd      	adds	r5, r1, #3
 80027c2:	f025 0503 	bic.w	r5, r5, #3
 80027c6:	3508      	adds	r5, #8
 80027c8:	2d0c      	cmp	r5, #12
 80027ca:	bf38      	it	cc
 80027cc:	250c      	movcc	r5, #12
 80027ce:	2d00      	cmp	r5, #0
 80027d0:	4606      	mov	r6, r0
 80027d2:	db01      	blt.n	80027d8 <_malloc_r+0x1c>
 80027d4:	42a9      	cmp	r1, r5
 80027d6:	d904      	bls.n	80027e2 <_malloc_r+0x26>
 80027d8:	230c      	movs	r3, #12
 80027da:	6033      	str	r3, [r6, #0]
 80027dc:	2000      	movs	r0, #0
 80027de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028b8 <_malloc_r+0xfc>
 80027e6:	f000 f869 	bl	80028bc <__malloc_lock>
 80027ea:	f8d8 3000 	ldr.w	r3, [r8]
 80027ee:	461c      	mov	r4, r3
 80027f0:	bb44      	cbnz	r4, 8002844 <_malloc_r+0x88>
 80027f2:	4629      	mov	r1, r5
 80027f4:	4630      	mov	r0, r6
 80027f6:	f7ff ffbf 	bl	8002778 <sbrk_aligned>
 80027fa:	1c43      	adds	r3, r0, #1
 80027fc:	4604      	mov	r4, r0
 80027fe:	d158      	bne.n	80028b2 <_malloc_r+0xf6>
 8002800:	f8d8 4000 	ldr.w	r4, [r8]
 8002804:	4627      	mov	r7, r4
 8002806:	2f00      	cmp	r7, #0
 8002808:	d143      	bne.n	8002892 <_malloc_r+0xd6>
 800280a:	2c00      	cmp	r4, #0
 800280c:	d04b      	beq.n	80028a6 <_malloc_r+0xea>
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	4639      	mov	r1, r7
 8002812:	4630      	mov	r0, r6
 8002814:	eb04 0903 	add.w	r9, r4, r3
 8002818:	f000 fc66 	bl	80030e8 <_sbrk_r>
 800281c:	4581      	cmp	r9, r0
 800281e:	d142      	bne.n	80028a6 <_malloc_r+0xea>
 8002820:	6821      	ldr	r1, [r4, #0]
 8002822:	1a6d      	subs	r5, r5, r1
 8002824:	4629      	mov	r1, r5
 8002826:	4630      	mov	r0, r6
 8002828:	f7ff ffa6 	bl	8002778 <sbrk_aligned>
 800282c:	3001      	adds	r0, #1
 800282e:	d03a      	beq.n	80028a6 <_malloc_r+0xea>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	442b      	add	r3, r5
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	f8d8 3000 	ldr.w	r3, [r8]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	bb62      	cbnz	r2, 8002898 <_malloc_r+0xdc>
 800283e:	f8c8 7000 	str.w	r7, [r8]
 8002842:	e00f      	b.n	8002864 <_malloc_r+0xa8>
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	1b52      	subs	r2, r2, r5
 8002848:	d420      	bmi.n	800288c <_malloc_r+0xd0>
 800284a:	2a0b      	cmp	r2, #11
 800284c:	d917      	bls.n	800287e <_malloc_r+0xc2>
 800284e:	1961      	adds	r1, r4, r5
 8002850:	42a3      	cmp	r3, r4
 8002852:	6025      	str	r5, [r4, #0]
 8002854:	bf18      	it	ne
 8002856:	6059      	strne	r1, [r3, #4]
 8002858:	6863      	ldr	r3, [r4, #4]
 800285a:	bf08      	it	eq
 800285c:	f8c8 1000 	streq.w	r1, [r8]
 8002860:	5162      	str	r2, [r4, r5]
 8002862:	604b      	str	r3, [r1, #4]
 8002864:	4630      	mov	r0, r6
 8002866:	f000 f82f 	bl	80028c8 <__malloc_unlock>
 800286a:	f104 000b 	add.w	r0, r4, #11
 800286e:	1d23      	adds	r3, r4, #4
 8002870:	f020 0007 	bic.w	r0, r0, #7
 8002874:	1ac2      	subs	r2, r0, r3
 8002876:	bf1c      	itt	ne
 8002878:	1a1b      	subne	r3, r3, r0
 800287a:	50a3      	strne	r3, [r4, r2]
 800287c:	e7af      	b.n	80027de <_malloc_r+0x22>
 800287e:	6862      	ldr	r2, [r4, #4]
 8002880:	42a3      	cmp	r3, r4
 8002882:	bf0c      	ite	eq
 8002884:	f8c8 2000 	streq.w	r2, [r8]
 8002888:	605a      	strne	r2, [r3, #4]
 800288a:	e7eb      	b.n	8002864 <_malloc_r+0xa8>
 800288c:	4623      	mov	r3, r4
 800288e:	6864      	ldr	r4, [r4, #4]
 8002890:	e7ae      	b.n	80027f0 <_malloc_r+0x34>
 8002892:	463c      	mov	r4, r7
 8002894:	687f      	ldr	r7, [r7, #4]
 8002896:	e7b6      	b.n	8002806 <_malloc_r+0x4a>
 8002898:	461a      	mov	r2, r3
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	42a3      	cmp	r3, r4
 800289e:	d1fb      	bne.n	8002898 <_malloc_r+0xdc>
 80028a0:	2300      	movs	r3, #0
 80028a2:	6053      	str	r3, [r2, #4]
 80028a4:	e7de      	b.n	8002864 <_malloc_r+0xa8>
 80028a6:	230c      	movs	r3, #12
 80028a8:	6033      	str	r3, [r6, #0]
 80028aa:	4630      	mov	r0, r6
 80028ac:	f000 f80c 	bl	80028c8 <__malloc_unlock>
 80028b0:	e794      	b.n	80027dc <_malloc_r+0x20>
 80028b2:	6005      	str	r5, [r0, #0]
 80028b4:	e7d6      	b.n	8002864 <_malloc_r+0xa8>
 80028b6:	bf00      	nop
 80028b8:	2000022c 	.word	0x2000022c

080028bc <__malloc_lock>:
 80028bc:	4801      	ldr	r0, [pc, #4]	@ (80028c4 <__malloc_lock+0x8>)
 80028be:	f7ff bf0e 	b.w	80026de <__retarget_lock_acquire_recursive>
 80028c2:	bf00      	nop
 80028c4:	20000224 	.word	0x20000224

080028c8 <__malloc_unlock>:
 80028c8:	4801      	ldr	r0, [pc, #4]	@ (80028d0 <__malloc_unlock+0x8>)
 80028ca:	f7ff bf09 	b.w	80026e0 <__retarget_lock_release_recursive>
 80028ce:	bf00      	nop
 80028d0:	20000224 	.word	0x20000224

080028d4 <__sfputc_r>:
 80028d4:	6893      	ldr	r3, [r2, #8]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	b410      	push	{r4}
 80028dc:	6093      	str	r3, [r2, #8]
 80028de:	da07      	bge.n	80028f0 <__sfputc_r+0x1c>
 80028e0:	6994      	ldr	r4, [r2, #24]
 80028e2:	42a3      	cmp	r3, r4
 80028e4:	db01      	blt.n	80028ea <__sfputc_r+0x16>
 80028e6:	290a      	cmp	r1, #10
 80028e8:	d102      	bne.n	80028f0 <__sfputc_r+0x1c>
 80028ea:	bc10      	pop	{r4}
 80028ec:	f000 bb68 	b.w	8002fc0 <__swbuf_r>
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	1c58      	adds	r0, r3, #1
 80028f4:	6010      	str	r0, [r2, #0]
 80028f6:	7019      	strb	r1, [r3, #0]
 80028f8:	4608      	mov	r0, r1
 80028fa:	bc10      	pop	{r4}
 80028fc:	4770      	bx	lr

080028fe <__sfputs_r>:
 80028fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002900:	4606      	mov	r6, r0
 8002902:	460f      	mov	r7, r1
 8002904:	4614      	mov	r4, r2
 8002906:	18d5      	adds	r5, r2, r3
 8002908:	42ac      	cmp	r4, r5
 800290a:	d101      	bne.n	8002910 <__sfputs_r+0x12>
 800290c:	2000      	movs	r0, #0
 800290e:	e007      	b.n	8002920 <__sfputs_r+0x22>
 8002910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002914:	463a      	mov	r2, r7
 8002916:	4630      	mov	r0, r6
 8002918:	f7ff ffdc 	bl	80028d4 <__sfputc_r>
 800291c:	1c43      	adds	r3, r0, #1
 800291e:	d1f3      	bne.n	8002908 <__sfputs_r+0xa>
 8002920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002924 <_vfiprintf_r>:
 8002924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002928:	460d      	mov	r5, r1
 800292a:	b09d      	sub	sp, #116	@ 0x74
 800292c:	4614      	mov	r4, r2
 800292e:	4698      	mov	r8, r3
 8002930:	4606      	mov	r6, r0
 8002932:	b118      	cbz	r0, 800293c <_vfiprintf_r+0x18>
 8002934:	6a03      	ldr	r3, [r0, #32]
 8002936:	b90b      	cbnz	r3, 800293c <_vfiprintf_r+0x18>
 8002938:	f7ff fdcc 	bl	80024d4 <__sinit>
 800293c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800293e:	07d9      	lsls	r1, r3, #31
 8002940:	d405      	bmi.n	800294e <_vfiprintf_r+0x2a>
 8002942:	89ab      	ldrh	r3, [r5, #12]
 8002944:	059a      	lsls	r2, r3, #22
 8002946:	d402      	bmi.n	800294e <_vfiprintf_r+0x2a>
 8002948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800294a:	f7ff fec8 	bl	80026de <__retarget_lock_acquire_recursive>
 800294e:	89ab      	ldrh	r3, [r5, #12]
 8002950:	071b      	lsls	r3, r3, #28
 8002952:	d501      	bpl.n	8002958 <_vfiprintf_r+0x34>
 8002954:	692b      	ldr	r3, [r5, #16]
 8002956:	b99b      	cbnz	r3, 8002980 <_vfiprintf_r+0x5c>
 8002958:	4629      	mov	r1, r5
 800295a:	4630      	mov	r0, r6
 800295c:	f000 fb6e 	bl	800303c <__swsetup_r>
 8002960:	b170      	cbz	r0, 8002980 <_vfiprintf_r+0x5c>
 8002962:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002964:	07dc      	lsls	r4, r3, #31
 8002966:	d504      	bpl.n	8002972 <_vfiprintf_r+0x4e>
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	b01d      	add	sp, #116	@ 0x74
 800296e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002972:	89ab      	ldrh	r3, [r5, #12]
 8002974:	0598      	lsls	r0, r3, #22
 8002976:	d4f7      	bmi.n	8002968 <_vfiprintf_r+0x44>
 8002978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800297a:	f7ff feb1 	bl	80026e0 <__retarget_lock_release_recursive>
 800297e:	e7f3      	b.n	8002968 <_vfiprintf_r+0x44>
 8002980:	2300      	movs	r3, #0
 8002982:	9309      	str	r3, [sp, #36]	@ 0x24
 8002984:	2320      	movs	r3, #32
 8002986:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800298a:	f8cd 800c 	str.w	r8, [sp, #12]
 800298e:	2330      	movs	r3, #48	@ 0x30
 8002990:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002b40 <_vfiprintf_r+0x21c>
 8002994:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002998:	f04f 0901 	mov.w	r9, #1
 800299c:	4623      	mov	r3, r4
 800299e:	469a      	mov	sl, r3
 80029a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029a4:	b10a      	cbz	r2, 80029aa <_vfiprintf_r+0x86>
 80029a6:	2a25      	cmp	r2, #37	@ 0x25
 80029a8:	d1f9      	bne.n	800299e <_vfiprintf_r+0x7a>
 80029aa:	ebba 0b04 	subs.w	fp, sl, r4
 80029ae:	d00b      	beq.n	80029c8 <_vfiprintf_r+0xa4>
 80029b0:	465b      	mov	r3, fp
 80029b2:	4622      	mov	r2, r4
 80029b4:	4629      	mov	r1, r5
 80029b6:	4630      	mov	r0, r6
 80029b8:	f7ff ffa1 	bl	80028fe <__sfputs_r>
 80029bc:	3001      	adds	r0, #1
 80029be:	f000 80a7 	beq.w	8002b10 <_vfiprintf_r+0x1ec>
 80029c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029c4:	445a      	add	r2, fp
 80029c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80029c8:	f89a 3000 	ldrb.w	r3, [sl]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 809f 	beq.w	8002b10 <_vfiprintf_r+0x1ec>
 80029d2:	2300      	movs	r3, #0
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029dc:	f10a 0a01 	add.w	sl, sl, #1
 80029e0:	9304      	str	r3, [sp, #16]
 80029e2:	9307      	str	r3, [sp, #28]
 80029e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80029ea:	4654      	mov	r4, sl
 80029ec:	2205      	movs	r2, #5
 80029ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029f2:	4853      	ldr	r0, [pc, #332]	@ (8002b40 <_vfiprintf_r+0x21c>)
 80029f4:	f7fd fbc4 	bl	8000180 <memchr>
 80029f8:	9a04      	ldr	r2, [sp, #16]
 80029fa:	b9d8      	cbnz	r0, 8002a34 <_vfiprintf_r+0x110>
 80029fc:	06d1      	lsls	r1, r2, #27
 80029fe:	bf44      	itt	mi
 8002a00:	2320      	movmi	r3, #32
 8002a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a06:	0713      	lsls	r3, r2, #28
 8002a08:	bf44      	itt	mi
 8002a0a:	232b      	movmi	r3, #43	@ 0x2b
 8002a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a10:	f89a 3000 	ldrb.w	r3, [sl]
 8002a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a16:	d015      	beq.n	8002a44 <_vfiprintf_r+0x120>
 8002a18:	9a07      	ldr	r2, [sp, #28]
 8002a1a:	4654      	mov	r4, sl
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f04f 0c0a 	mov.w	ip, #10
 8002a22:	4621      	mov	r1, r4
 8002a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a28:	3b30      	subs	r3, #48	@ 0x30
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	d94b      	bls.n	8002ac6 <_vfiprintf_r+0x1a2>
 8002a2e:	b1b0      	cbz	r0, 8002a5e <_vfiprintf_r+0x13a>
 8002a30:	9207      	str	r2, [sp, #28]
 8002a32:	e014      	b.n	8002a5e <_vfiprintf_r+0x13a>
 8002a34:	eba0 0308 	sub.w	r3, r0, r8
 8002a38:	fa09 f303 	lsl.w	r3, r9, r3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	9304      	str	r3, [sp, #16]
 8002a40:	46a2      	mov	sl, r4
 8002a42:	e7d2      	b.n	80029ea <_vfiprintf_r+0xc6>
 8002a44:	9b03      	ldr	r3, [sp, #12]
 8002a46:	1d19      	adds	r1, r3, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	9103      	str	r1, [sp, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bfbb      	ittet	lt
 8002a50:	425b      	neglt	r3, r3
 8002a52:	f042 0202 	orrlt.w	r2, r2, #2
 8002a56:	9307      	strge	r3, [sp, #28]
 8002a58:	9307      	strlt	r3, [sp, #28]
 8002a5a:	bfb8      	it	lt
 8002a5c:	9204      	strlt	r2, [sp, #16]
 8002a5e:	7823      	ldrb	r3, [r4, #0]
 8002a60:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a62:	d10a      	bne.n	8002a7a <_vfiprintf_r+0x156>
 8002a64:	7863      	ldrb	r3, [r4, #1]
 8002a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a68:	d132      	bne.n	8002ad0 <_vfiprintf_r+0x1ac>
 8002a6a:	9b03      	ldr	r3, [sp, #12]
 8002a6c:	1d1a      	adds	r2, r3, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	9203      	str	r2, [sp, #12]
 8002a72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a76:	3402      	adds	r4, #2
 8002a78:	9305      	str	r3, [sp, #20]
 8002a7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002b44 <_vfiprintf_r+0x220>
 8002a7e:	7821      	ldrb	r1, [r4, #0]
 8002a80:	2203      	movs	r2, #3
 8002a82:	4650      	mov	r0, sl
 8002a84:	f7fd fb7c 	bl	8000180 <memchr>
 8002a88:	b138      	cbz	r0, 8002a9a <_vfiprintf_r+0x176>
 8002a8a:	9b04      	ldr	r3, [sp, #16]
 8002a8c:	eba0 000a 	sub.w	r0, r0, sl
 8002a90:	2240      	movs	r2, #64	@ 0x40
 8002a92:	4082      	lsls	r2, r0
 8002a94:	4313      	orrs	r3, r2
 8002a96:	3401      	adds	r4, #1
 8002a98:	9304      	str	r3, [sp, #16]
 8002a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9e:	482a      	ldr	r0, [pc, #168]	@ (8002b48 <_vfiprintf_r+0x224>)
 8002aa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002aa4:	2206      	movs	r2, #6
 8002aa6:	f7fd fb6b 	bl	8000180 <memchr>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d03f      	beq.n	8002b2e <_vfiprintf_r+0x20a>
 8002aae:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <_vfiprintf_r+0x228>)
 8002ab0:	bb1b      	cbnz	r3, 8002afa <_vfiprintf_r+0x1d6>
 8002ab2:	9b03      	ldr	r3, [sp, #12]
 8002ab4:	3307      	adds	r3, #7
 8002ab6:	f023 0307 	bic.w	r3, r3, #7
 8002aba:	3308      	adds	r3, #8
 8002abc:	9303      	str	r3, [sp, #12]
 8002abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ac0:	443b      	add	r3, r7
 8002ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ac4:	e76a      	b.n	800299c <_vfiprintf_r+0x78>
 8002ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aca:	460c      	mov	r4, r1
 8002acc:	2001      	movs	r0, #1
 8002ace:	e7a8      	b.n	8002a22 <_vfiprintf_r+0xfe>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	3401      	adds	r4, #1
 8002ad4:	9305      	str	r3, [sp, #20]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f04f 0c0a 	mov.w	ip, #10
 8002adc:	4620      	mov	r0, r4
 8002ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ae2:	3a30      	subs	r2, #48	@ 0x30
 8002ae4:	2a09      	cmp	r2, #9
 8002ae6:	d903      	bls.n	8002af0 <_vfiprintf_r+0x1cc>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0c6      	beq.n	8002a7a <_vfiprintf_r+0x156>
 8002aec:	9105      	str	r1, [sp, #20]
 8002aee:	e7c4      	b.n	8002a7a <_vfiprintf_r+0x156>
 8002af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002af4:	4604      	mov	r4, r0
 8002af6:	2301      	movs	r3, #1
 8002af8:	e7f0      	b.n	8002adc <_vfiprintf_r+0x1b8>
 8002afa:	ab03      	add	r3, sp, #12
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	462a      	mov	r2, r5
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <_vfiprintf_r+0x22c>)
 8002b02:	a904      	add	r1, sp, #16
 8002b04:	4630      	mov	r0, r6
 8002b06:	f3af 8000 	nop.w
 8002b0a:	4607      	mov	r7, r0
 8002b0c:	1c78      	adds	r0, r7, #1
 8002b0e:	d1d6      	bne.n	8002abe <_vfiprintf_r+0x19a>
 8002b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b12:	07d9      	lsls	r1, r3, #31
 8002b14:	d405      	bmi.n	8002b22 <_vfiprintf_r+0x1fe>
 8002b16:	89ab      	ldrh	r3, [r5, #12]
 8002b18:	059a      	lsls	r2, r3, #22
 8002b1a:	d402      	bmi.n	8002b22 <_vfiprintf_r+0x1fe>
 8002b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b1e:	f7ff fddf 	bl	80026e0 <__retarget_lock_release_recursive>
 8002b22:	89ab      	ldrh	r3, [r5, #12]
 8002b24:	065b      	lsls	r3, r3, #25
 8002b26:	f53f af1f 	bmi.w	8002968 <_vfiprintf_r+0x44>
 8002b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b2c:	e71e      	b.n	800296c <_vfiprintf_r+0x48>
 8002b2e:	ab03      	add	r3, sp, #12
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	462a      	mov	r2, r5
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <_vfiprintf_r+0x22c>)
 8002b36:	a904      	add	r1, sp, #16
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f000 f879 	bl	8002c30 <_printf_i>
 8002b3e:	e7e4      	b.n	8002b0a <_vfiprintf_r+0x1e6>
 8002b40:	080032cc 	.word	0x080032cc
 8002b44:	080032d2 	.word	0x080032d2
 8002b48:	080032d6 	.word	0x080032d6
 8002b4c:	00000000 	.word	0x00000000
 8002b50:	080028ff 	.word	0x080028ff

08002b54 <_printf_common>:
 8002b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b58:	4616      	mov	r6, r2
 8002b5a:	4698      	mov	r8, r3
 8002b5c:	688a      	ldr	r2, [r1, #8]
 8002b5e:	690b      	ldr	r3, [r1, #16]
 8002b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bfb8      	it	lt
 8002b68:	4613      	movlt	r3, r2
 8002b6a:	6033      	str	r3, [r6, #0]
 8002b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b70:	4607      	mov	r7, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	b10a      	cbz	r2, 8002b7a <_printf_common+0x26>
 8002b76:	3301      	adds	r3, #1
 8002b78:	6033      	str	r3, [r6, #0]
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	0699      	lsls	r1, r3, #26
 8002b7e:	bf42      	ittt	mi
 8002b80:	6833      	ldrmi	r3, [r6, #0]
 8002b82:	3302      	addmi	r3, #2
 8002b84:	6033      	strmi	r3, [r6, #0]
 8002b86:	6825      	ldr	r5, [r4, #0]
 8002b88:	f015 0506 	ands.w	r5, r5, #6
 8002b8c:	d106      	bne.n	8002b9c <_printf_common+0x48>
 8002b8e:	f104 0a19 	add.w	sl, r4, #25
 8002b92:	68e3      	ldr	r3, [r4, #12]
 8002b94:	6832      	ldr	r2, [r6, #0]
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	42ab      	cmp	r3, r5
 8002b9a:	dc26      	bgt.n	8002bea <_printf_common+0x96>
 8002b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ba0:	6822      	ldr	r2, [r4, #0]
 8002ba2:	3b00      	subs	r3, #0
 8002ba4:	bf18      	it	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	0692      	lsls	r2, r2, #26
 8002baa:	d42b      	bmi.n	8002c04 <_printf_common+0xb0>
 8002bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	47c8      	blx	r9
 8002bb6:	3001      	adds	r0, #1
 8002bb8:	d01e      	beq.n	8002bf8 <_printf_common+0xa4>
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	6922      	ldr	r2, [r4, #16]
 8002bbe:	f003 0306 	and.w	r3, r3, #6
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf02      	ittt	eq
 8002bc6:	68e5      	ldreq	r5, [r4, #12]
 8002bc8:	6833      	ldreq	r3, [r6, #0]
 8002bca:	1aed      	subeq	r5, r5, r3
 8002bcc:	68a3      	ldr	r3, [r4, #8]
 8002bce:	bf0c      	ite	eq
 8002bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bd4:	2500      	movne	r5, #0
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	bfc4      	itt	gt
 8002bda:	1a9b      	subgt	r3, r3, r2
 8002bdc:	18ed      	addgt	r5, r5, r3
 8002bde:	2600      	movs	r6, #0
 8002be0:	341a      	adds	r4, #26
 8002be2:	42b5      	cmp	r5, r6
 8002be4:	d11a      	bne.n	8002c1c <_printf_common+0xc8>
 8002be6:	2000      	movs	r0, #0
 8002be8:	e008      	b.n	8002bfc <_printf_common+0xa8>
 8002bea:	2301      	movs	r3, #1
 8002bec:	4652      	mov	r2, sl
 8002bee:	4641      	mov	r1, r8
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	47c8      	blx	r9
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d103      	bne.n	8002c00 <_printf_common+0xac>
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c00:	3501      	adds	r5, #1
 8002c02:	e7c6      	b.n	8002b92 <_printf_common+0x3e>
 8002c04:	18e1      	adds	r1, r4, r3
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	2030      	movs	r0, #48	@ 0x30
 8002c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c0e:	4422      	add	r2, r4
 8002c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c18:	3302      	adds	r3, #2
 8002c1a:	e7c7      	b.n	8002bac <_printf_common+0x58>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	4622      	mov	r2, r4
 8002c20:	4641      	mov	r1, r8
 8002c22:	4638      	mov	r0, r7
 8002c24:	47c8      	blx	r9
 8002c26:	3001      	adds	r0, #1
 8002c28:	d0e6      	beq.n	8002bf8 <_printf_common+0xa4>
 8002c2a:	3601      	adds	r6, #1
 8002c2c:	e7d9      	b.n	8002be2 <_printf_common+0x8e>
	...

08002c30 <_printf_i>:
 8002c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c34:	7e0f      	ldrb	r7, [r1, #24]
 8002c36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c38:	2f78      	cmp	r7, #120	@ 0x78
 8002c3a:	4691      	mov	r9, r2
 8002c3c:	4680      	mov	r8, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	469a      	mov	sl, r3
 8002c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c46:	d807      	bhi.n	8002c58 <_printf_i+0x28>
 8002c48:	2f62      	cmp	r7, #98	@ 0x62
 8002c4a:	d80a      	bhi.n	8002c62 <_printf_i+0x32>
 8002c4c:	2f00      	cmp	r7, #0
 8002c4e:	f000 80d2 	beq.w	8002df6 <_printf_i+0x1c6>
 8002c52:	2f58      	cmp	r7, #88	@ 0x58
 8002c54:	f000 80b9 	beq.w	8002dca <_printf_i+0x19a>
 8002c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c60:	e03a      	b.n	8002cd8 <_printf_i+0xa8>
 8002c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c66:	2b15      	cmp	r3, #21
 8002c68:	d8f6      	bhi.n	8002c58 <_printf_i+0x28>
 8002c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8002c70 <_printf_i+0x40>)
 8002c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c70:	08002cc9 	.word	0x08002cc9
 8002c74:	08002cdd 	.word	0x08002cdd
 8002c78:	08002c59 	.word	0x08002c59
 8002c7c:	08002c59 	.word	0x08002c59
 8002c80:	08002c59 	.word	0x08002c59
 8002c84:	08002c59 	.word	0x08002c59
 8002c88:	08002cdd 	.word	0x08002cdd
 8002c8c:	08002c59 	.word	0x08002c59
 8002c90:	08002c59 	.word	0x08002c59
 8002c94:	08002c59 	.word	0x08002c59
 8002c98:	08002c59 	.word	0x08002c59
 8002c9c:	08002ddd 	.word	0x08002ddd
 8002ca0:	08002d07 	.word	0x08002d07
 8002ca4:	08002d97 	.word	0x08002d97
 8002ca8:	08002c59 	.word	0x08002c59
 8002cac:	08002c59 	.word	0x08002c59
 8002cb0:	08002dff 	.word	0x08002dff
 8002cb4:	08002c59 	.word	0x08002c59
 8002cb8:	08002d07 	.word	0x08002d07
 8002cbc:	08002c59 	.word	0x08002c59
 8002cc0:	08002c59 	.word	0x08002c59
 8002cc4:	08002d9f 	.word	0x08002d9f
 8002cc8:	6833      	ldr	r3, [r6, #0]
 8002cca:	1d1a      	adds	r2, r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6032      	str	r2, [r6, #0]
 8002cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e09d      	b.n	8002e18 <_printf_i+0x1e8>
 8002cdc:	6833      	ldr	r3, [r6, #0]
 8002cde:	6820      	ldr	r0, [r4, #0]
 8002ce0:	1d19      	adds	r1, r3, #4
 8002ce2:	6031      	str	r1, [r6, #0]
 8002ce4:	0606      	lsls	r6, r0, #24
 8002ce6:	d501      	bpl.n	8002cec <_printf_i+0xbc>
 8002ce8:	681d      	ldr	r5, [r3, #0]
 8002cea:	e003      	b.n	8002cf4 <_printf_i+0xc4>
 8002cec:	0645      	lsls	r5, r0, #25
 8002cee:	d5fb      	bpl.n	8002ce8 <_printf_i+0xb8>
 8002cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002cf4:	2d00      	cmp	r5, #0
 8002cf6:	da03      	bge.n	8002d00 <_printf_i+0xd0>
 8002cf8:	232d      	movs	r3, #45	@ 0x2d
 8002cfa:	426d      	negs	r5, r5
 8002cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d00:	4859      	ldr	r0, [pc, #356]	@ (8002e68 <_printf_i+0x238>)
 8002d02:	230a      	movs	r3, #10
 8002d04:	e011      	b.n	8002d2a <_printf_i+0xfa>
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	6833      	ldr	r3, [r6, #0]
 8002d0a:	0608      	lsls	r0, r1, #24
 8002d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d10:	d402      	bmi.n	8002d18 <_printf_i+0xe8>
 8002d12:	0649      	lsls	r1, r1, #25
 8002d14:	bf48      	it	mi
 8002d16:	b2ad      	uxthmi	r5, r5
 8002d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d1a:	4853      	ldr	r0, [pc, #332]	@ (8002e68 <_printf_i+0x238>)
 8002d1c:	6033      	str	r3, [r6, #0]
 8002d1e:	bf14      	ite	ne
 8002d20:	230a      	movne	r3, #10
 8002d22:	2308      	moveq	r3, #8
 8002d24:	2100      	movs	r1, #0
 8002d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d2a:	6866      	ldr	r6, [r4, #4]
 8002d2c:	60a6      	str	r6, [r4, #8]
 8002d2e:	2e00      	cmp	r6, #0
 8002d30:	bfa2      	ittt	ge
 8002d32:	6821      	ldrge	r1, [r4, #0]
 8002d34:	f021 0104 	bicge.w	r1, r1, #4
 8002d38:	6021      	strge	r1, [r4, #0]
 8002d3a:	b90d      	cbnz	r5, 8002d40 <_printf_i+0x110>
 8002d3c:	2e00      	cmp	r6, #0
 8002d3e:	d04b      	beq.n	8002dd8 <_printf_i+0x1a8>
 8002d40:	4616      	mov	r6, r2
 8002d42:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d46:	fb03 5711 	mls	r7, r3, r1, r5
 8002d4a:	5dc7      	ldrb	r7, [r0, r7]
 8002d4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d50:	462f      	mov	r7, r5
 8002d52:	42bb      	cmp	r3, r7
 8002d54:	460d      	mov	r5, r1
 8002d56:	d9f4      	bls.n	8002d42 <_printf_i+0x112>
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d10b      	bne.n	8002d74 <_printf_i+0x144>
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	07df      	lsls	r7, r3, #31
 8002d60:	d508      	bpl.n	8002d74 <_printf_i+0x144>
 8002d62:	6923      	ldr	r3, [r4, #16]
 8002d64:	6861      	ldr	r1, [r4, #4]
 8002d66:	4299      	cmp	r1, r3
 8002d68:	bfde      	ittt	le
 8002d6a:	2330      	movle	r3, #48	@ 0x30
 8002d6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d74:	1b92      	subs	r2, r2, r6
 8002d76:	6122      	str	r2, [r4, #16]
 8002d78:	f8cd a000 	str.w	sl, [sp]
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	aa03      	add	r2, sp, #12
 8002d80:	4621      	mov	r1, r4
 8002d82:	4640      	mov	r0, r8
 8002d84:	f7ff fee6 	bl	8002b54 <_printf_common>
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d14a      	bne.n	8002e22 <_printf_i+0x1f2>
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	b004      	add	sp, #16
 8002d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	f043 0320 	orr.w	r3, r3, #32
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	4833      	ldr	r0, [pc, #204]	@ (8002e6c <_printf_i+0x23c>)
 8002da0:	2778      	movs	r7, #120	@ 0x78
 8002da2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	6831      	ldr	r1, [r6, #0]
 8002daa:	061f      	lsls	r7, r3, #24
 8002dac:	f851 5b04 	ldr.w	r5, [r1], #4
 8002db0:	d402      	bmi.n	8002db8 <_printf_i+0x188>
 8002db2:	065f      	lsls	r7, r3, #25
 8002db4:	bf48      	it	mi
 8002db6:	b2ad      	uxthmi	r5, r5
 8002db8:	6031      	str	r1, [r6, #0]
 8002dba:	07d9      	lsls	r1, r3, #31
 8002dbc:	bf44      	itt	mi
 8002dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8002dc2:	6023      	strmi	r3, [r4, #0]
 8002dc4:	b11d      	cbz	r5, 8002dce <_printf_i+0x19e>
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	e7ac      	b.n	8002d24 <_printf_i+0xf4>
 8002dca:	4827      	ldr	r0, [pc, #156]	@ (8002e68 <_printf_i+0x238>)
 8002dcc:	e7e9      	b.n	8002da2 <_printf_i+0x172>
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	f023 0320 	bic.w	r3, r3, #32
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	e7f6      	b.n	8002dc6 <_printf_i+0x196>
 8002dd8:	4616      	mov	r6, r2
 8002dda:	e7bd      	b.n	8002d58 <_printf_i+0x128>
 8002ddc:	6833      	ldr	r3, [r6, #0]
 8002dde:	6825      	ldr	r5, [r4, #0]
 8002de0:	6961      	ldr	r1, [r4, #20]
 8002de2:	1d18      	adds	r0, r3, #4
 8002de4:	6030      	str	r0, [r6, #0]
 8002de6:	062e      	lsls	r6, r5, #24
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	d501      	bpl.n	8002df0 <_printf_i+0x1c0>
 8002dec:	6019      	str	r1, [r3, #0]
 8002dee:	e002      	b.n	8002df6 <_printf_i+0x1c6>
 8002df0:	0668      	lsls	r0, r5, #25
 8002df2:	d5fb      	bpl.n	8002dec <_printf_i+0x1bc>
 8002df4:	8019      	strh	r1, [r3, #0]
 8002df6:	2300      	movs	r3, #0
 8002df8:	6123      	str	r3, [r4, #16]
 8002dfa:	4616      	mov	r6, r2
 8002dfc:	e7bc      	b.n	8002d78 <_printf_i+0x148>
 8002dfe:	6833      	ldr	r3, [r6, #0]
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	6032      	str	r2, [r6, #0]
 8002e04:	681e      	ldr	r6, [r3, #0]
 8002e06:	6862      	ldr	r2, [r4, #4]
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f7fd f9b8 	bl	8000180 <memchr>
 8002e10:	b108      	cbz	r0, 8002e16 <_printf_i+0x1e6>
 8002e12:	1b80      	subs	r0, r0, r6
 8002e14:	6060      	str	r0, [r4, #4]
 8002e16:	6863      	ldr	r3, [r4, #4]
 8002e18:	6123      	str	r3, [r4, #16]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e20:	e7aa      	b.n	8002d78 <_printf_i+0x148>
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	4632      	mov	r2, r6
 8002e26:	4649      	mov	r1, r9
 8002e28:	4640      	mov	r0, r8
 8002e2a:	47d0      	blx	sl
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d0ad      	beq.n	8002d8c <_printf_i+0x15c>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	079b      	lsls	r3, r3, #30
 8002e34:	d413      	bmi.n	8002e5e <_printf_i+0x22e>
 8002e36:	68e0      	ldr	r0, [r4, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	4298      	cmp	r0, r3
 8002e3c:	bfb8      	it	lt
 8002e3e:	4618      	movlt	r0, r3
 8002e40:	e7a6      	b.n	8002d90 <_printf_i+0x160>
 8002e42:	2301      	movs	r3, #1
 8002e44:	4632      	mov	r2, r6
 8002e46:	4649      	mov	r1, r9
 8002e48:	4640      	mov	r0, r8
 8002e4a:	47d0      	blx	sl
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d09d      	beq.n	8002d8c <_printf_i+0x15c>
 8002e50:	3501      	adds	r5, #1
 8002e52:	68e3      	ldr	r3, [r4, #12]
 8002e54:	9903      	ldr	r1, [sp, #12]
 8002e56:	1a5b      	subs	r3, r3, r1
 8002e58:	42ab      	cmp	r3, r5
 8002e5a:	dcf2      	bgt.n	8002e42 <_printf_i+0x212>
 8002e5c:	e7eb      	b.n	8002e36 <_printf_i+0x206>
 8002e5e:	2500      	movs	r5, #0
 8002e60:	f104 0619 	add.w	r6, r4, #25
 8002e64:	e7f5      	b.n	8002e52 <_printf_i+0x222>
 8002e66:	bf00      	nop
 8002e68:	080032dd 	.word	0x080032dd
 8002e6c:	080032ee 	.word	0x080032ee

08002e70 <__sflush_r>:
 8002e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	0716      	lsls	r6, r2, #28
 8002e78:	4605      	mov	r5, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	d454      	bmi.n	8002f28 <__sflush_r+0xb8>
 8002e7e:	684b      	ldr	r3, [r1, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	dc02      	bgt.n	8002e8a <__sflush_r+0x1a>
 8002e84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dd48      	ble.n	8002f1c <__sflush_r+0xac>
 8002e8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e8c:	2e00      	cmp	r6, #0
 8002e8e:	d045      	beq.n	8002f1c <__sflush_r+0xac>
 8002e90:	2300      	movs	r3, #0
 8002e92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e96:	682f      	ldr	r7, [r5, #0]
 8002e98:	6a21      	ldr	r1, [r4, #32]
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	d030      	beq.n	8002f00 <__sflush_r+0x90>
 8002e9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	0759      	lsls	r1, r3, #29
 8002ea4:	d505      	bpl.n	8002eb2 <__sflush_r+0x42>
 8002ea6:	6863      	ldr	r3, [r4, #4]
 8002ea8:	1ad2      	subs	r2, r2, r3
 8002eaa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002eac:	b10b      	cbz	r3, 8002eb2 <__sflush_r+0x42>
 8002eae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002eb0:	1ad2      	subs	r2, r2, r3
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002eb6:	6a21      	ldr	r1, [r4, #32]
 8002eb8:	4628      	mov	r0, r5
 8002eba:	47b0      	blx	r6
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	d106      	bne.n	8002ed0 <__sflush_r+0x60>
 8002ec2:	6829      	ldr	r1, [r5, #0]
 8002ec4:	291d      	cmp	r1, #29
 8002ec6:	d82b      	bhi.n	8002f20 <__sflush_r+0xb0>
 8002ec8:	4a28      	ldr	r2, [pc, #160]	@ (8002f6c <__sflush_r+0xfc>)
 8002eca:	410a      	asrs	r2, r1
 8002ecc:	07d6      	lsls	r6, r2, #31
 8002ece:	d427      	bmi.n	8002f20 <__sflush_r+0xb0>
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6062      	str	r2, [r4, #4]
 8002ed4:	04d9      	lsls	r1, r3, #19
 8002ed6:	6922      	ldr	r2, [r4, #16]
 8002ed8:	6022      	str	r2, [r4, #0]
 8002eda:	d504      	bpl.n	8002ee6 <__sflush_r+0x76>
 8002edc:	1c42      	adds	r2, r0, #1
 8002ede:	d101      	bne.n	8002ee4 <__sflush_r+0x74>
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	b903      	cbnz	r3, 8002ee6 <__sflush_r+0x76>
 8002ee4:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ee6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ee8:	602f      	str	r7, [r5, #0]
 8002eea:	b1b9      	cbz	r1, 8002f1c <__sflush_r+0xac>
 8002eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ef0:	4299      	cmp	r1, r3
 8002ef2:	d002      	beq.n	8002efa <__sflush_r+0x8a>
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	f7ff fbf5 	bl	80026e4 <_free_r>
 8002efa:	2300      	movs	r3, #0
 8002efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002efe:	e00d      	b.n	8002f1c <__sflush_r+0xac>
 8002f00:	2301      	movs	r3, #1
 8002f02:	4628      	mov	r0, r5
 8002f04:	47b0      	blx	r6
 8002f06:	4602      	mov	r2, r0
 8002f08:	1c50      	adds	r0, r2, #1
 8002f0a:	d1c9      	bne.n	8002ea0 <__sflush_r+0x30>
 8002f0c:	682b      	ldr	r3, [r5, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0c6      	beq.n	8002ea0 <__sflush_r+0x30>
 8002f12:	2b1d      	cmp	r3, #29
 8002f14:	d001      	beq.n	8002f1a <__sflush_r+0xaa>
 8002f16:	2b16      	cmp	r3, #22
 8002f18:	d11d      	bne.n	8002f56 <__sflush_r+0xe6>
 8002f1a:	602f      	str	r7, [r5, #0]
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e021      	b.n	8002f64 <__sflush_r+0xf4>
 8002f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f24:	b21b      	sxth	r3, r3
 8002f26:	e01a      	b.n	8002f5e <__sflush_r+0xee>
 8002f28:	690f      	ldr	r7, [r1, #16]
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	d0f6      	beq.n	8002f1c <__sflush_r+0xac>
 8002f2e:	0793      	lsls	r3, r2, #30
 8002f30:	680e      	ldr	r6, [r1, #0]
 8002f32:	bf08      	it	eq
 8002f34:	694b      	ldreq	r3, [r1, #20]
 8002f36:	600f      	str	r7, [r1, #0]
 8002f38:	bf18      	it	ne
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	1bf6      	subs	r6, r6, r7
 8002f3e:	608b      	str	r3, [r1, #8]
 8002f40:	2e00      	cmp	r6, #0
 8002f42:	ddeb      	ble.n	8002f1c <__sflush_r+0xac>
 8002f44:	6a21      	ldr	r1, [r4, #32]
 8002f46:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002f4a:	4633      	mov	r3, r6
 8002f4c:	463a      	mov	r2, r7
 8002f4e:	4628      	mov	r0, r5
 8002f50:	47e0      	blx	ip
 8002f52:	2800      	cmp	r0, #0
 8002f54:	dc07      	bgt.n	8002f66 <__sflush_r+0xf6>
 8002f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f5e:	81a3      	strh	r3, [r4, #12]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f66:	4407      	add	r7, r0
 8002f68:	1a36      	subs	r6, r6, r0
 8002f6a:	e7e9      	b.n	8002f40 <__sflush_r+0xd0>
 8002f6c:	dfbffffe 	.word	0xdfbffffe

08002f70 <_fflush_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	690b      	ldr	r3, [r1, #16]
 8002f74:	4605      	mov	r5, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	b913      	cbnz	r3, 8002f80 <_fflush_r+0x10>
 8002f7a:	2500      	movs	r5, #0
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}
 8002f80:	b118      	cbz	r0, 8002f8a <_fflush_r+0x1a>
 8002f82:	6a03      	ldr	r3, [r0, #32]
 8002f84:	b90b      	cbnz	r3, 8002f8a <_fflush_r+0x1a>
 8002f86:	f7ff faa5 	bl	80024d4 <__sinit>
 8002f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f3      	beq.n	8002f7a <_fflush_r+0xa>
 8002f92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f94:	07d0      	lsls	r0, r2, #31
 8002f96:	d404      	bmi.n	8002fa2 <_fflush_r+0x32>
 8002f98:	0599      	lsls	r1, r3, #22
 8002f9a:	d402      	bmi.n	8002fa2 <_fflush_r+0x32>
 8002f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f9e:	f7ff fb9e 	bl	80026de <__retarget_lock_acquire_recursive>
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	f7ff ff63 	bl	8002e70 <__sflush_r>
 8002faa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fac:	07da      	lsls	r2, r3, #31
 8002fae:	4605      	mov	r5, r0
 8002fb0:	d4e4      	bmi.n	8002f7c <_fflush_r+0xc>
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	059b      	lsls	r3, r3, #22
 8002fb6:	d4e1      	bmi.n	8002f7c <_fflush_r+0xc>
 8002fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fba:	f7ff fb91 	bl	80026e0 <__retarget_lock_release_recursive>
 8002fbe:	e7dd      	b.n	8002f7c <_fflush_r+0xc>

08002fc0 <__swbuf_r>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	460e      	mov	r6, r1
 8002fc4:	4614      	mov	r4, r2
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	b118      	cbz	r0, 8002fd2 <__swbuf_r+0x12>
 8002fca:	6a03      	ldr	r3, [r0, #32]
 8002fcc:	b90b      	cbnz	r3, 8002fd2 <__swbuf_r+0x12>
 8002fce:	f7ff fa81 	bl	80024d4 <__sinit>
 8002fd2:	69a3      	ldr	r3, [r4, #24]
 8002fd4:	60a3      	str	r3, [r4, #8]
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	071a      	lsls	r2, r3, #28
 8002fda:	d501      	bpl.n	8002fe0 <__swbuf_r+0x20>
 8002fdc:	6923      	ldr	r3, [r4, #16]
 8002fde:	b943      	cbnz	r3, 8002ff2 <__swbuf_r+0x32>
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 f82a 	bl	800303c <__swsetup_r>
 8002fe8:	b118      	cbz	r0, 8002ff2 <__swbuf_r+0x32>
 8002fea:	f04f 37ff 	mov.w	r7, #4294967295
 8002fee:	4638      	mov	r0, r7
 8002ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	6922      	ldr	r2, [r4, #16]
 8002ff6:	1a98      	subs	r0, r3, r2
 8002ff8:	6963      	ldr	r3, [r4, #20]
 8002ffa:	b2f6      	uxtb	r6, r6
 8002ffc:	4283      	cmp	r3, r0
 8002ffe:	4637      	mov	r7, r6
 8003000:	dc05      	bgt.n	800300e <__swbuf_r+0x4e>
 8003002:	4621      	mov	r1, r4
 8003004:	4628      	mov	r0, r5
 8003006:	f7ff ffb3 	bl	8002f70 <_fflush_r>
 800300a:	2800      	cmp	r0, #0
 800300c:	d1ed      	bne.n	8002fea <__swbuf_r+0x2a>
 800300e:	68a3      	ldr	r3, [r4, #8]
 8003010:	3b01      	subs	r3, #1
 8003012:	60a3      	str	r3, [r4, #8]
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	6022      	str	r2, [r4, #0]
 800301a:	701e      	strb	r6, [r3, #0]
 800301c:	6962      	ldr	r2, [r4, #20]
 800301e:	1c43      	adds	r3, r0, #1
 8003020:	429a      	cmp	r2, r3
 8003022:	d004      	beq.n	800302e <__swbuf_r+0x6e>
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	07db      	lsls	r3, r3, #31
 8003028:	d5e1      	bpl.n	8002fee <__swbuf_r+0x2e>
 800302a:	2e0a      	cmp	r6, #10
 800302c:	d1df      	bne.n	8002fee <__swbuf_r+0x2e>
 800302e:	4621      	mov	r1, r4
 8003030:	4628      	mov	r0, r5
 8003032:	f7ff ff9d 	bl	8002f70 <_fflush_r>
 8003036:	2800      	cmp	r0, #0
 8003038:	d0d9      	beq.n	8002fee <__swbuf_r+0x2e>
 800303a:	e7d6      	b.n	8002fea <__swbuf_r+0x2a>

0800303c <__swsetup_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <__swsetup_r+0xa8>)
 8003040:	4605      	mov	r5, r0
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	460c      	mov	r4, r1
 8003046:	b118      	cbz	r0, 8003050 <__swsetup_r+0x14>
 8003048:	6a03      	ldr	r3, [r0, #32]
 800304a:	b90b      	cbnz	r3, 8003050 <__swsetup_r+0x14>
 800304c:	f7ff fa42 	bl	80024d4 <__sinit>
 8003050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003054:	0719      	lsls	r1, r3, #28
 8003056:	d422      	bmi.n	800309e <__swsetup_r+0x62>
 8003058:	06da      	lsls	r2, r3, #27
 800305a:	d407      	bmi.n	800306c <__swsetup_r+0x30>
 800305c:	2209      	movs	r2, #9
 800305e:	602a      	str	r2, [r5, #0]
 8003060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003064:	81a3      	strh	r3, [r4, #12]
 8003066:	f04f 30ff 	mov.w	r0, #4294967295
 800306a:	e033      	b.n	80030d4 <__swsetup_r+0x98>
 800306c:	0758      	lsls	r0, r3, #29
 800306e:	d512      	bpl.n	8003096 <__swsetup_r+0x5a>
 8003070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003072:	b141      	cbz	r1, 8003086 <__swsetup_r+0x4a>
 8003074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003078:	4299      	cmp	r1, r3
 800307a:	d002      	beq.n	8003082 <__swsetup_r+0x46>
 800307c:	4628      	mov	r0, r5
 800307e:	f7ff fb31 	bl	80026e4 <_free_r>
 8003082:	2300      	movs	r3, #0
 8003084:	6363      	str	r3, [r4, #52]	@ 0x34
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800308c:	81a3      	strh	r3, [r4, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	6063      	str	r3, [r4, #4]
 8003092:	6923      	ldr	r3, [r4, #16]
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	81a3      	strh	r3, [r4, #12]
 800309e:	6923      	ldr	r3, [r4, #16]
 80030a0:	b94b      	cbnz	r3, 80030b6 <__swsetup_r+0x7a>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ac:	d003      	beq.n	80030b6 <__swsetup_r+0x7a>
 80030ae:	4621      	mov	r1, r4
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 f84f 	bl	8003154 <__smakebuf_r>
 80030b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ba:	f013 0201 	ands.w	r2, r3, #1
 80030be:	d00a      	beq.n	80030d6 <__swsetup_r+0x9a>
 80030c0:	2200      	movs	r2, #0
 80030c2:	60a2      	str	r2, [r4, #8]
 80030c4:	6962      	ldr	r2, [r4, #20]
 80030c6:	4252      	negs	r2, r2
 80030c8:	61a2      	str	r2, [r4, #24]
 80030ca:	6922      	ldr	r2, [r4, #16]
 80030cc:	b942      	cbnz	r2, 80030e0 <__swsetup_r+0xa4>
 80030ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80030d2:	d1c5      	bne.n	8003060 <__swsetup_r+0x24>
 80030d4:	bd38      	pop	{r3, r4, r5, pc}
 80030d6:	0799      	lsls	r1, r3, #30
 80030d8:	bf58      	it	pl
 80030da:	6962      	ldrpl	r2, [r4, #20]
 80030dc:	60a2      	str	r2, [r4, #8]
 80030de:	e7f4      	b.n	80030ca <__swsetup_r+0x8e>
 80030e0:	2000      	movs	r0, #0
 80030e2:	e7f7      	b.n	80030d4 <__swsetup_r+0x98>
 80030e4:	20000054 	.word	0x20000054

080030e8 <_sbrk_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4d06      	ldr	r5, [pc, #24]	@ (8003104 <_sbrk_r+0x1c>)
 80030ec:	2300      	movs	r3, #0
 80030ee:	4604      	mov	r4, r0
 80030f0:	4608      	mov	r0, r1
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	f7fd fbf2 	bl	80008dc <_sbrk>
 80030f8:	1c43      	adds	r3, r0, #1
 80030fa:	d102      	bne.n	8003102 <_sbrk_r+0x1a>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	b103      	cbz	r3, 8003102 <_sbrk_r+0x1a>
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	bd38      	pop	{r3, r4, r5, pc}
 8003104:	20000220 	.word	0x20000220

08003108 <__swhatbuf_r>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	460c      	mov	r4, r1
 800310c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003110:	2900      	cmp	r1, #0
 8003112:	b096      	sub	sp, #88	@ 0x58
 8003114:	4615      	mov	r5, r2
 8003116:	461e      	mov	r6, r3
 8003118:	da0d      	bge.n	8003136 <__swhatbuf_r+0x2e>
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	bf14      	ite	ne
 8003126:	2340      	movne	r3, #64	@ 0x40
 8003128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800312c:	2000      	movs	r0, #0
 800312e:	6031      	str	r1, [r6, #0]
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	b016      	add	sp, #88	@ 0x58
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	466a      	mov	r2, sp
 8003138:	f000 f848 	bl	80031cc <_fstat_r>
 800313c:	2800      	cmp	r0, #0
 800313e:	dbec      	blt.n	800311a <__swhatbuf_r+0x12>
 8003140:	9901      	ldr	r1, [sp, #4]
 8003142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800314a:	4259      	negs	r1, r3
 800314c:	4159      	adcs	r1, r3
 800314e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003152:	e7eb      	b.n	800312c <__swhatbuf_r+0x24>

08003154 <__smakebuf_r>:
 8003154:	898b      	ldrh	r3, [r1, #12]
 8003156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003158:	079d      	lsls	r5, r3, #30
 800315a:	4606      	mov	r6, r0
 800315c:	460c      	mov	r4, r1
 800315e:	d507      	bpl.n	8003170 <__smakebuf_r+0x1c>
 8003160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	6123      	str	r3, [r4, #16]
 8003168:	2301      	movs	r3, #1
 800316a:	6163      	str	r3, [r4, #20]
 800316c:	b003      	add	sp, #12
 800316e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003170:	ab01      	add	r3, sp, #4
 8003172:	466a      	mov	r2, sp
 8003174:	f7ff ffc8 	bl	8003108 <__swhatbuf_r>
 8003178:	9f00      	ldr	r7, [sp, #0]
 800317a:	4605      	mov	r5, r0
 800317c:	4639      	mov	r1, r7
 800317e:	4630      	mov	r0, r6
 8003180:	f7ff fb1c 	bl	80027bc <_malloc_r>
 8003184:	b948      	cbnz	r0, 800319a <__smakebuf_r+0x46>
 8003186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800318a:	059a      	lsls	r2, r3, #22
 800318c:	d4ee      	bmi.n	800316c <__smakebuf_r+0x18>
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	81a3      	strh	r3, [r4, #12]
 8003198:	e7e2      	b.n	8003160 <__smakebuf_r+0xc>
 800319a:	89a3      	ldrh	r3, [r4, #12]
 800319c:	6020      	str	r0, [r4, #0]
 800319e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	9b01      	ldr	r3, [sp, #4]
 80031a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80031aa:	b15b      	cbz	r3, 80031c4 <__smakebuf_r+0x70>
 80031ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031b0:	4630      	mov	r0, r6
 80031b2:	f000 f81d 	bl	80031f0 <_isatty_r>
 80031b6:	b128      	cbz	r0, 80031c4 <__smakebuf_r+0x70>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	89a3      	ldrh	r3, [r4, #12]
 80031c6:	431d      	orrs	r5, r3
 80031c8:	81a5      	strh	r5, [r4, #12]
 80031ca:	e7cf      	b.n	800316c <__smakebuf_r+0x18>

080031cc <_fstat_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4d07      	ldr	r5, [pc, #28]	@ (80031ec <_fstat_r+0x20>)
 80031d0:	2300      	movs	r3, #0
 80031d2:	4604      	mov	r4, r0
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	602b      	str	r3, [r5, #0]
 80031da:	f7fd fb5a 	bl	8000892 <_fstat>
 80031de:	1c43      	adds	r3, r0, #1
 80031e0:	d102      	bne.n	80031e8 <_fstat_r+0x1c>
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	b103      	cbz	r3, 80031e8 <_fstat_r+0x1c>
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	bd38      	pop	{r3, r4, r5, pc}
 80031ea:	bf00      	nop
 80031ec:	20000220 	.word	0x20000220

080031f0 <_isatty_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4d06      	ldr	r5, [pc, #24]	@ (800320c <_isatty_r+0x1c>)
 80031f4:	2300      	movs	r3, #0
 80031f6:	4604      	mov	r4, r0
 80031f8:	4608      	mov	r0, r1
 80031fa:	602b      	str	r3, [r5, #0]
 80031fc:	f7fd fb58 	bl	80008b0 <_isatty>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d102      	bne.n	800320a <_isatty_r+0x1a>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	b103      	cbz	r3, 800320a <_isatty_r+0x1a>
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000220 	.word	0x20000220

08003210 <_init>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr

0800321c <_fini>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr
